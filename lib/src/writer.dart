import 'dart:io';

import 'package:data_class/src/util.dart';

import 'model.dart';

class Writer {
  final ParseResult result;

  Writer(this.result);

  String writeCode() {
    final buffer = StringBuffer();

    buffer.writeln('// Generated by data class generator');
    buffer.writeln('// DO NOT MODIFY BY HAND\n');
    buffer.writeln(result.partOf);
    buffer.writeln();

    for (final clazz in result.classes) {
      buffer.writeln('mixin ${clazz.mixinName} {');

      for (final field in clazz.fields) {
        buffer.writeln('  abstract final ${field.type} ${field.name};');
      }

      // toMap
      _buildToMap(buffer, clazz);

      // copyWith
      _buildCopyWith(buffer, clazz);

      // ==
      _buildEquality(buffer, clazz);

      // hashCode
      _buildHashCode(buffer, clazz);

      buffer.writeln('}\n');
    }

    File(result.outputPath)
      ..createSync(recursive: true)
      ..writeAsStringSync(buffer.toString());
    print("generated ${result.outputPath}");
    return buffer.toString();
  }

  void _buildEquality(StringBuffer buffer, ClassInfo clazz) {
    // == override
    buffer.writeln('\n  @override');
    buffer.writeln('  bool operator ==(Object other) {');
    buffer.writeln('    if (identical(this, other)) return true;');
    buffer.writeln('    if (other is! ${clazz.name}) return false;');
    buffer.writeln();
    for (final field in clazz.fields) {
      final name = field.name;
      final type = field.type;

      if (type.isCollection()) {
        buffer.writeln(
          '    if (!const DeepCollectionEquality().equals($name, other.$name)) return false;',
        );
      } else {
        buffer.writeln('    if ($name != other.$name) return false;');
      }
    }
    buffer.writeln('    return true;');
    buffer.writeln('  }');
  }

  void _buildHashCode(StringBuffer buffer, ClassInfo clazz) {
    buffer.writeln('\n  @override');
    buffer.writeln('  int get hashCode =>');
    final hashParts = clazz.fields
        .map((f) {
          final name = f.name;
          final type = f.type;
          if (type.isCollection()) {
            return 'const DeepCollectionEquality().hash($name)';
          }
          return '$name.hashCode';
        })
        .join(' ^\n      ');
    buffer.writeln('      $hashParts;');
  }

  void _buildCopyWith(StringBuffer buffer, ClassInfo clazz) {
    buffer.write('\n  ${clazz.name} copyWith({');
    for (final field in clazz.fields) {
      buffer.write('${field.type}? ${field.name}, \n      ');
    }
    buffer.writeln('}) {');
    buffer.writeln('    return ${clazz.name}(');
    for (final field in clazz.fields) {
      buffer.writeln('      ${field.name} ?? this.${field.name},');
    }
    buffer.writeln('    );');
    buffer.writeln('  }');
  }

  void _buildToMap(StringBuffer buffer, ClassInfo clazz) {
    buffer.writeln('\n  Map<String, dynamic> toMap() => {');
    for (final field in clazz.fields) {
      buffer.writeln("    '${field.name}': ${field.name},");
    }
    buffer.writeln('  };');
  }
}
