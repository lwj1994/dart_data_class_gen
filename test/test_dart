
// ignore_for_file: invalid_annotation_target

import 'dart:ui';

import 'package:collection/collection.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:linjie/base/base_page.dart';
import 'package:linjie/bean/token_extension.dart';
import 'package:linjie/config/app_env.dart';
import 'package:linjie/feature/community/oc/model.dart';
import 'package:linjie/feature/community/post/util.dart';
import 'package:linjie/feature/community/search/search_model.dart';
import 'package:linjie/feature/community/token/create/model.dart';
import 'package:linjie/feature/community/token/model.dart';
import 'package:linjie/feature/community/token/rank/model.dart';
import 'package:linjie/feature/pay/wxshoufutong/model.dart';
import 'package:linjie/feature/trade/auction/model.dart';
import 'package:linjie/feature/trade/commission/demand/model.dart';
import 'package:linjie/feature/trade/commission/model.dart';
import 'package:linjie/feature/trade/model.dart';
import 'package:linjie/feature/trade/order/model.dart';
import 'package:linjie/feature/update_app/check_app_version.dart';
import 'package:linjie/feature/update_app/model/updateinfo.dart';
import 'package:linjie/feature/user/model.dart';
import 'package:linjie/feature/user/user_manager.dart';
import 'package:linjie/network/api.dart';
import 'package:linjie/network/api_config.dart';
import 'package:linjie/utils/date.dart';
import 'package:linjie/utils/exception_uploader.dart';
import 'package:linjie/utils/num_extension.dart';
import 'package:linjie/utils/string_extension.dart';

import 'bean_json_adapter.dart';
import 'community_bean.dart';

part 'bean_base.freezed.dart';
part 'bean_base.g.dart';

@JsonSerializable(createToJson: false, ignoreUnannotated: true)
class EchoApiResponseWithListBean<T> {
  @JsonKey(name: 'code', readValue: _readApiResponseValue)
  final String code;
  @JsonKey(name: 'message')
  final String message;

  @JsonKey(name: "data", fromJson: jsonToObject)
  final ListBean<T>? data;

  const EchoApiResponseWithListBean({
    this.code = ApiService.codeNone,
    this.message = "",
    this.data,
  });

  factory EchoApiResponseWithListBean.fromJson(Map<String, dynamic> json) =>
      _$EchoApiResponseWithListBeanFromJson(json);
}

@JsonSerializable(createToJson: false, ignoreUnannotated: true)
class ListBean<T> {
  @JsonKey(name: 'total', readValue: ListBean._readValue)
  final int total;

  @JsonKey(name: 'hasMore', readValue: ListBean._readValue)
  final bool? hasMore;

  @JsonKey(name: 'nextOffset', readValue: ListBean._readValue)
  final int? nextOffset;

  @JsonKey(name: 'cursor', readValue: ListBean._readValue)
  final String? cursor;

  @JsonKey(name: 'before', readValue: ListBean._readValue)
  final String? before;

  // 算法id
  @JsonKey(name: 'requestId', readValue: ListBean._readValue)
  final String? requestId;

  @JsonKey(name: "list", fromJson: jsonToList, readValue: ListBean._readValue)
  final List<T>? list;

  factory ListBean.fromJson(Map<String, dynamic> json) =>
      _$ListBeanFromJson(json);

//<editor-fold desc="Data Methods">
  const ListBean({
    this.total = 0,
    this.hasMore,
    this.nextOffset,
    this.cursor,
    this.before,
    this.requestId,
    this.list,
  });

  ListBean<R> mapList<R>(List<R> Function(List<T> list) list) {
    return ListBean<R>(
        total: total,
        nextOffset: nextOffset,
        hasMore: hasMore,
        before: before,
        cursor: cursor,
        requestId: requestId,
        list: list.call(extList));
  }

  static bool _isListAndNotEmpty(dynamic v) {
    if (v == null) return false;
    if (v is List) {
      return v.isNotEmpty;
    }
    return false;
  }

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    if (key == "nextOffset") {
      if (value != null) {
        if (value is! int) {
          return int.tryParse(value.toString());
        }
      }
    }
    if (key == "list") {
      if (_isListAndNotEmpty("list")) {
        return value;
      }
      if (_isListAndNotEmpty(map["items"])) {
        return map["items"];
      }
      if (_isListAndNotEmpty(map["accountList"])) {
        return map["accountList"];
      }
      if (_isListAndNotEmpty(map["rows"])) {
        return map["rows"];
      }
      if (_isListAndNotEmpty(map["queries"])) {
        return map["queries"];
      }
      if (_isListAndNotEmpty(map["tokenList"])) {
        return map["tokenList"];
      }
      if (_isListAndNotEmpty(map["auctionFields"])) {
        return map["auctionFields"];
      }
      if (_isListAndNotEmpty(map["data"])) {
        return map["data"];
      }
      if (_isListAndNotEmpty(map["accountList"])) {
        return map["accountList"];
      }
      if (_isListAndNotEmpty(map["auctions"])) {
        return map["auctions"];
      }
      if (_isListAndNotEmpty(map["rootComments"])) {
        return map["rootComments"];
      }
      if (_isListAndNotEmpty(map["comments"])) {
        return map["comments"];
      }
      if (_isListAndNotEmpty(map["characterList"])) {
        return map["characterList"];
      }
      if (_isListAndNotEmpty(map["postList"])) {
        return map["postList"];
      }
      if (_isListAndNotEmpty(map["tradeList"])) {
        return map["tradeList"];
      }
      if (_isListAndNotEmpty(map["managers"])) {
        return map["managers"];
      }
      return value;
    }
    if (key == "total") {
      return int.tryParse(
          (value ?? map["count"] ?? map["total_count"])?.toString() ?? "");
    }
    if (key == "cursor") {
      return value ??
          map["after"] ??
          map["lastId"] ??
          map["next"] ??
          map["nextCursor"] ??
          map["nextId"];
    }
    if (key == "hasMore") {
      return value ?? map["more"];
    }
    return value;
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ListBean &&
          runtimeType == other.runtimeType &&
          total == other.total &&
          hasMore == other.hasMore &&
          nextOffset == other.nextOffset &&
          cursor == other.cursor &&
          before == other.before &&
          requestId == other.requestId &&
          list == other.list);

  @override
  int get hashCode =>
      total.hashCode ^
      hasMore.hashCode ^
      nextOffset.hashCode ^
      cursor.hashCode ^
      requestId.hashCode ^
      before.hashCode ^
      list.hashCode;

  @override
  String toString() {
    return 'ListBean{ total: $total, hasMore: $hasMore, nextOffset: $nextOffset, cursor: $cursor,before:$before, requestId: $requestId, list: $list,}';
  }

  ListBean<T> copyWith({
    int? total,
    bool? hasMore,
    int? nextOffset,
    String? cursor,
    String? before,
    String? requestId,
    List<T>? list,
  }) {
    return ListBean(
      total: total ?? this.total,
      hasMore: hasMore ?? this.hasMore,
      nextOffset: nextOffset ?? this.nextOffset,
      cursor: cursor ?? this.cursor,
      before: before ?? this.before,
      requestId: requestId ?? this.requestId,
      list: list ?? this.list,
    );
  }
}

extension ListBeanExtension<T> on ListBean<T> {
  bool extHasMore() {
    if (hasMore != null) {
      return hasMore!;
    }
    final hasCursor = extCursor.isNotNullOrEmpty;
    if (!hasCursor) {
      return extList.isNotEmpty;
    }
    return hasCursor;
  }

  String? get extCursor {
    if (cursor.isNotNullOrEmpty && cursor != "0") {
      return cursor;
    }
    return null;
  }

  List<T> get extList {
    List<T> newlist = [];
    if (list?.isNotEmpty == true) {
      newlist = list ?? [];
    }
    return newlist;
  }
}

@Deprecated("use BaseResponse<List<T>>")
@JsonSerializable(createToJson: false, ignoreUnannotated: true)
class BaseListResponse<T> {
  @JsonKey(name: 'code')
  final int? code;
  @JsonKey(name: 'message')
  final String? message;

  @JsonKey(name: "data", fromJson: jsonToList)
  final List<T>? data;

  const BaseListResponse({
    this.code,
    this.message,
    this.data,
  });

  factory BaseListResponse.fromJson(Map<String, dynamic> json) =>
      _$BaseListResponseFromJson(json);
}

Object? _readApiResponseValue(Map<dynamic, dynamic> map, String key) {
  final value = map[key];
  if (key == "code") {
    return (value ?? map["status"] ?? map["name"])?.toString();
  }
  return value;
}

@JsonSerializable(createToJson: false, ignoreUnannotated: true)
class EchoApiResponse<T> {
  // int or string ??
  @JsonKey(name: 'code', readValue: _readApiResponseValue)
  final String code;

  @JsonKey(
    name: 'message',
  )
  final String message;

  @JsonKey(name: "data", fromJson: jsonToObject)
  final T? data;

  const EchoApiResponse({
    this.code = ApiService.codeNone,
    this.message = "",
    this.data,
  });

  @override
  String toString() {
    return 'EchoApiResponse{code: $code, message: $message, data: $data}';
  }

  factory EchoApiResponse.fromJson(Map<String, dynamic> json) =>
      _$EchoApiResponseFromJson(json);
}

@freezed
class ImSendState with _$ImSendState {
  static const none = ImSendState();

  const factory ImSendState({
    @Default("") @JsonKey(name: 'userId') String userId,
    @Default("") @JsonKey(name: 'expiredTime') String expiredTime,
    @Default("") @JsonKey(name: 'createTime') String createTime,
    @Default("") @JsonKey(name: 'reason') String reason,
    @Default(0) @JsonKey(name: 'blockType') int blockType,
    @Default(0) @JsonKey(name: 'status') int status,
    @Default(0) @JsonKey(name: 'count') int count,
    @Default(true) @JsonKey(name: 'canSend') bool canSend,
  }) = _ImSendState;

  factory ImSendState.fromJson(Map<String, Object?> json) =>
      _$ImSendStateFromJson(json);
}

@freezed
class LoginInfoBean with _$LoginInfoBean {
  const factory LoginInfoBean({
    @Default("") @JsonKey(name: 'token') String token,
    @Default("") @JsonKey(name: 'refreshToken') String refreshToken,
    @Default(false) @JsonKey(name: 'isNewUser') bool isNewUser,
    @Default(false)
    @JsonKey(name: 'isNewUserForInterest')
    bool isNewUserForInterest,
    @Default(0) @JsonKey(name: 'expiresIn') int tokenExpiresDurationSeconds,
    @Default(0) int tokenCreateTimeSeconds,
  }) = _LoginInfoBean;

  factory LoginInfoBean.fromJson(Map<String, Object?> json) =>
      _$LoginInfoBeanFromJson(json);
}

@freezed
class TradeStats with _$TradeStats {
  const factory TradeStats({
    @JsonKey(name: "goodReviewFromSellerCount")
    @Default(0)
    int goodReviewFromSellerNum,
    @JsonKey(name: "goodReviewFromBuyerCount")
    @Default(0)
    int goodReviewFromBuyerNum,
    // 约稿数量
    @JsonKey(name: "commissionBoughtCount") @Default(0) int commissionBoughtNum,
    // 接稿
    @JsonKey(name: "commissionSoldCount") @Default(0) int commissionSoldNum,
    @JsonKey(name: "totalSoldCount") @Default(0) int soldOutNum,
    @JsonKey(name: "totalBoughtCount") @Default(0) int purchasedNum,
  }) = _TradeStats;

  factory TradeStats.fromJson(Map<String, Object?> json) =>
      _$TradeStatsFromJson(json);
}

@freezed
class ServerTime with _$ServerTime {
  const factory ServerTime({
    @Default(0) @JsonKey(name: 'timestamp') int timestamp,
    @Default("") @JsonKey(name: 'localtime') String localtime,
    @Default("") @JsonKey(name: 'rfc1123') String rfc1123,
  }) = _ServerTime;

  factory ServerTime.fromJson(Map<String, Object?> json) =>
      _$ServerTimeFromJson(json);
}

@freezed
class UserInfoBean with _$UserInfoBean, WidgetSkeletonModel {
  static const none = UserInfoBean();

  @JsonSerializable(ignoreUnannotated: true)
  const factory UserInfoBean({
    // 官方认证
    @JsonKey(name: 'verification') UserVerification? verification,
    @JsonKey(name: 'isBlock') @Default(false) bool blocked,
    // 认证过的创作者
    @JsonKey(name: 'sellerQualification')
    @Default(false)
    bool isCertifiedCreator,
    // 接稿公审请求
    @JsonKey(name: 'sellerQualificationApply')
    CreatorApplication? creatorApplication,
    @Default(false) bool iAmBlocked,
    @JsonKey(name: 'consumeAmount') @Default(0) double consumeAmount,
    @JsonKey(name: 'address') @Default("") String address,
    @JsonKey(name: 'province') @Default("") String province,
    @JsonKey(name: 'city') @Default("") String city,
    // USER SHOP ..
    @JsonKey(name: 'type') @Default("") String type,
    @JsonKey(name: 'remark') @Default("") String remark,
    @Default(false) @JsonKey(name: 'isSubscribe') bool isMySubscribing,
    @DemandSettingStatusNullableConverter()
    @JsonKey(name: 'invitedStatus')
    DemandSettingStatus? demandStatus,
    @DateTimeNullableConverter()
    @JsonKey(name: 'createdAt')
    DateTime? createdAt,
    @Default("")
    @JsonKey(
      name: 'avatar',
      readValue: UserInfoBean._readValue,
    )
    String avatar,
    @JsonKey(
      name: 'bio',
      readValue: UserInfoBean._readValue,
    )
    @Default("")
    String bio,
    @JsonKey(
      name: 'id',
      readValue: UserInfoBean._readValue,
    )
    @Default("")
    String id,
    @JsonKey(name: 'description') @Default("") String description,
    @JsonKey(name: 'createdCollectionCount')
    @Default("0")
    String createdCollectionCount,
    @JsonKey(name: 'isCertified') @Default(false) bool isCertified,
    @JsonKey(name: 'isFollow') @Default(false) bool isFollow,
    @JsonKey(name: 'isBeFollowed') @Default(false) bool isFollower,
    @JsonKey(name: 'isCreator') @Default(false) bool isCreator,
    @JsonKey(name: 'createdTokens') @Default([]) List<TokenBean> createdTokens,
    @JsonKey(name: 'addressExploreUrl') @Default("") String? addressExploreUrl,
    @JsonKey(name: 'followedUserCount') @Default("0") String followingCount,
    @JsonKey(name: 'fansCount') @Default("0") String followerCount,
    @Default(0) @JsonKey(name: 'bidPrice') num bidPrice,
    @Default("") @JsonKey(name: 'bidAt') String bidAt,
    @Default(false) @JsonKey(name: 'isDelegate') bool isDelegateBid,
    @Default("") @JsonKey(name: 'bidUserPlate') String bidUserPlate,
    @Default("")
    @JsonKey(
      name: 'name',
      readValue: UserInfoBean._readValue,
    )
    String name,
    @Default("") @JsonKey(name: 'tel') String tel,
    @Default("")
    @JsonKey(
      name: 'background',
      readValue: UserInfoBean._readValue,
    )
    String backgroundImageUrl,
    @Default(false) @JsonKey(name: 'isMutual') bool isFollowMutual,
    @Default(false) @JsonKey(name: 'isRiskySeller') bool isRiskySeller,
    @JsonKey(name: 'tradeBrief') TradeStats? tradeStats,
    @Default([]) @JsonKey(name: 'showItems') List<LinjieFeed> feeds,
    @Default(CreatorApplicationReview())
    CreatorApplicationReview creatorApplicationReview,
    ShoufutongRegisterState? shoufutongRegisterState,
    UserTradeInfo? tradeInfo,
    @Default(false) bool widgetSkeleton,
  }) = _UserInfoBean;

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    if (key == "bio") {
      return value ?? map["intro"];
    }
    if (key == "name") {
      return value ??
          map["userName"] ??
          map["nickName"] ??
          map["displayName"] ??
          map["nickname"];
    }
    if (key == "id") {
      final v = (value ?? map["userId"]);
      if (v == "0") {
        return "";
      }
      return v;
    }
    if (key == "avatar") {
      return value ?? map["avatarUrl"];
    }
    if (key == "background") {
      return value ?? map["bannerImageUrl"];
    }
    return value;
  }

  factory UserInfoBean.fromJson(Map<String, Object?> json) =>
      _$UserInfoBeanFromJson(json);
}

extension UserInfoExtensions on UserInfoBean {
  bool get extShoufutongAvailable {
    return shoufutongRegisterState?.extStatus == RegisterStatus.complete;
  }

  bool get isLinjieOfficial => verification?.type == "PLATFORM_OFFICIAL";

  String get extWebUrl {
    return "${appEnv.currentEnv.webBaseUrl}/profile?userId=$id";
  }

  bool get isUser => type == "USER" || type.isEmpty;

  String get extFollowText {
    return (isFollow == true)
        ? (isFollower ? "互相关注" : "已关注")
        : isFollower
            ? "回关"
            : "关注";
  }

  bool get isApple => tel == UserManager.instance.appstoreReviewPhone;
}

@freezed
class TokenBean with _$TokenBean, WidgetSkeletonModel {
  static const none = TokenBean();

  //token被删除有特殊的error code 5000200
  static const noneCode = "5000200";

  @JsonSerializable(ignoreUnannotated: true)
  const factory TokenBean({
    @Default(false) bool widgetSkeleton,
    @JsonKey(name: 'searchImage') TokenSearchImageInfo? searchImage,
    @JsonKey(name: 'resellQualificationProof') ResellProof? resellProof,
    @JsonKey(name: 'originType')
    @TokenCreateTypeConverter()
    TokenCreateType? createType,
    @Default(0) @JsonKey(name: 'purchaseInstructionType') int purchaseType,
    @JsonKey(name: 'cover') @Default("") String cover,
    @JsonKey(name: 'estimateFee') @Default(0) num estimateFee,
    @JsonKey(name: 'belongedCharacters')
    @Default([])
    List<OriginCharacter> charactersBelongs,
    // 0无质疑，1弱提示，2强提示
    @JsonKey(name: 'suspectedLevel') @Default("") String suspectedLevel,
    @JsonKey(name: 'suspectedCount') @Default("") String suspectedCount,
    @JsonKey(name: 'distance') @Default(0) double similarDistance,
    @JsonKey(name: 'ownerName') @Default("") String ownerName,
    @JsonKey(name: 'score') @Default("0") String score,
    @JsonKey(name: 'ownerAvatarUrl') @Default("") String ownerAvatarUrl,
    @JsonKey(name: 'dealPrice') @Default(0) double dealPrice,
    @JsonKey(name: 'userInfo') UserInfoBean? userInfo,
    @JsonKey(name: 'creator') UserInfoBean? creator,
    @Default("")
    @JsonKey(name: 'id', readValue: TokenBean._readValue)
    String id,
    @Default("")
    @JsonKey(name: 'name', readValue: TokenBean._readValue)
    String name,
    @Default("")
    @JsonKey(name: 'imageUrl', readValue: TokenBean._readValue)
    String imageUrl,
    @Default("")
    @JsonKey(
        name: 'imageFilePath', includeFromJson: false, includeToJson: false)
    String imageFilePath,
    @JsonKey(name: 'tokenIdOnChain') String? tokenIdOnChain,
    @JsonKey(name: 'tradeInfo', readValue: TokenBean._readValue)
    TradeInfoBean? tradeInfo,
    @JsonKey(name: 'maxBidUserInfo') UserInfoBean? maxBidUserInfo,
    @JsonKey(name: 'owner') UserInfoBean? owner,
    @DateTimeNullableConverter() @JsonKey(name: 'ownTime') DateTime? ownTime,
    @Default("") @JsonKey(name: 'author') String authorName,
    @Default("") @JsonKey(name: 'islandId') String islandId,
    @Default(false) @JsonKey(name: 'isHidden') bool isHidden,
    @JsonKey(name: 'isModerated') bool? isModerated,
    @JsonKey(name: 'moderateStatus') String? moderateStatus,
    @JsonKey(name: 'moderateStatusV2') String? moderateStatus2,
    @deprecated
    @JsonKey(name: 'lastTrxHashExploreUrl')
    String? lastTrxHashExploreUrl,
    @deprecated @JsonKey(name: 'lastTrxTime') String? lastTrxTime,
    @JsonKey(name: 'publisher') UserInfoBean? publisher,

    /// 发布时间
    @DateTimeNullableConverter()
    @JsonKey(name: 'issueTime')
    DateTime? issueTime,
    @deprecated @JsonKey(name: 'lastTrxHash') String? lastTrxHash,
    @JsonKey(name: 'isLike') bool? isLike,
    @Default("")
    @JsonKey(name: 'likeCount', readValue: TokenBean._readValue)
    String likeCount,
    @JsonKey(name: 'collection') TokenCollection? collection,
    @Default("") @JsonKey(name: 'description') String description,
    @JsonKey(name: 'supplementInstruction') String? supplementInstruction,
    @JsonKey(name: 'QQ') String? qq,
    @JsonKey(name: 'attachments') List<String>? attachments,
    @JsonKey(name: 'rejectReason') String? rejectReason,
    @Default([]) @JsonKey(name: 'covers') List<ImageBean> coverImages,
    @Default([]) @JsonKey(name: 'originImages') List<ImageBean> originImages,
    @Default([])
    @JsonKey(name: 'watermarkImages', readValue: TokenBean._readValue)
    List<ImageBean> watermarkImages,
    @Default("NFT") @JsonKey(name: 'type') String type,
    @Default("") @JsonKey(name: 'tokenType') String tokenTypeStr,
    @Default("0") @JsonKey(name: 'ownerCount') String ownerCount,
    @Deprecated("use owner")
    @Default(false)
    @JsonKey(name: 'isOwner')
    bool isOwner,
    @Default("") @JsonKey(name: 'artType') String artTypeStr,
    @JsonKey(name: 'requestId') String? requestId,
    @Default([]) @JsonKey(name: 'leaderBoards') List<TokenRank> ranks,
    @Default("") @JsonKey(name: 'artTypeDisplayName') String artTypeDisplayName,
    @Default("") @JsonKey(name: 'secondaryArtType') String secondaryArtType,
    @Default("0") @JsonKey(name: 'commentCount') String commentCount,
    @Default("") @JsonKey(name: 'tokenIndex') String index,
    @Default("") @JsonKey(name: 'originTokenId') String originTokenId,
    @JsonKey(name: 'isOrigin') bool? isOrigin,
    @Default("") @JsonKey(name: 'characterName') String ocName,
    @Default(false)
    @JsonKey(includeFromJson: false, includeToJson: false)
    bool isLoading,
    double? myDelegatePrice,
    @JsonKey(includeFromJson: false, includeToJson: false)
    @Default(false)
    bool checked,
  }) = _TokenBean;

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    if (key == "likeCount") {
      return value ?? map["likes"];
    }
    if (key == "watermarkImages") {
      return value ?? map["watermaskImages"];
    }
    if (key == "tradeInfo") {
      try {
        if (value != null) {
          if (value["status"] == "SOLD_OUT") {
            return null;
          }
        }
      } catch (e) {
        //
      }
      return value;
    }
    if (key == "name") {
      final name = (value ?? map["tokenName"])?.toString() ?? "";
      if (AppVersionManager.isAppStoreReviewing) {
        return name.replaceAll(AppVersionManager.tradeRexp, "临");
      } else {
        return name;
      }
    }
    if (key == "id") {
      return (value ?? map["tokenId"])?.toString() ?? "";
    }
    if (key == "imageUrl") {
      return (value ?? map["tokenImageUrl"] ?? map["cover"]);
    }

    return value;
  }

  factory TokenBean.fromJson(Map<String, Object?> json) =>
      _$TokenBeanFromJson(json);

  factory TokenBean.fromTradeInfo(TradeInfoBean trade) {
    return trade.extToken.copyWith(tradeInfo: trade);
  }

  factory TokenBean.fromSearchImage(SearchImageBean searchImage) {
    return searchImage.token!;
  }

  factory TokenBean.fromNotification(KurilNotification notification) {
    return TokenBean(
      id: notification.meta?["relatedId"] ?? "",
      watermarkImages: [
        ImageBean(
          url: notification.image,
        ),
      ],
    );
  }
}

@freezed
class UserTradeInfo with _$UserTradeInfo {
  const factory UserTradeInfo({
    @Default(0) @JsonKey(name: 'lotteryCount') int raffleCount,
  }) = _UserTradeInfo;

  factory UserTradeInfo.fromJson(Map<String, Object?> json) =>
      _$UserTradeInfoFromJson(json);
}

@freezed
class C2cUserNoticeBean with _$C2cUserNoticeBean {
  const factory C2cUserNoticeBean({
    @Default(false) @JsonKey(name: 'agreed') bool agreed,
  }) = _C2cUserNoticeBean;

  factory C2cUserNoticeBean.fromJson(Map<String, Object?> json) =>
      _$C2cUserNoticeBeanFromJson(json);
}

@freezed
class ResellProof with _$ResellProof {
  const factory ResellProof({
    @Default("") @JsonKey(name: 'authContactInfo') String authContactInfo,
    @Default([]) @JsonKey(name: 'purchaseProof') List<String> purchaseProofs,
    @Default([]) @JsonKey(name: 'resellProof') List<String> resellProofs,
  }) = _ResellProof;

  factory ResellProof.fromJson(Map<String, Object?> json) =>
      _$ResellProofFromJson(json);
}

@freezed
class TradeInfoBean with _$TradeInfoBean {
  const factory TradeInfoBean({
    @Default("") @JsonKey(name: 'status') String status,
    @_TradeTypeConverter()
    @Default(TradeType.none)
    @JsonKey(name: 'type')
    TradeType type,
    @JsonKey(name: 'tradeOrderId') String? tradeOrderId,
    @Deprecated("") @JsonKey(name: 'price') num? price,
    @Deprecated("") @JsonKey(name: 'startTradeTime') String? startTradeTime,
    @Deprecated("")
    @JsonKey(name: 'auctionInfo')
    AuctionInfoBean? legacyAuctionInfo,
    @Deprecated("") @JsonKey(name: 'ownerId') String? ownerId,
    @Deprecated("") @JsonKey(name: 'tokenId') String? tokenId,
    @Deprecated("")
    @Default(TokenBean.none)
    @JsonKey(name: 'token')
    TokenBean token,
    @Deprecated("")
    @Default(TokenBean.none)
    @JsonKey(name: 'tokenV2')
    TokenBean tokenV2,
    @Deprecated("") @Default("") @JsonKey(name: 'buyerId') String buyerId,
    @Deprecated("") @Default("0") @JsonKey(name: 'stock') String stock,
    @Deprecated("") @JsonKey(name: 'saleOrder') TradePrice? tradePrice,
    @Deprecated("") @JsonKey(name: 'auction') TradeAuction? tradeAuction,
  }) = _TradeInfoBean;

  factory TradeInfoBean.fromJson(Map<String, Object?> json) =>
      _$TradeInfoBeanFromJson(json);
}

class _TradeTypeConverter implements JsonConverter<TradeType, String> {
  const _TradeTypeConverter();

  @override
  TradeType fromJson(String json) {
    return TradeType.values
            .firstWhereOrNull((element) => element.jsonType == json) ??
        TradeType.none;
  }

  @override
  String toJson(TradeType object) => object.jsonType;
}

class DurationConverter implements JsonConverter<Duration, String> {
  const DurationConverter();

  @override
  Duration fromJson(String json) {
    int? inv = int.tryParse(json);
    if (inv == null) {
      return Duration.zero;
    }
    return Duration(milliseconds: inv);
  }

  @override
  String toJson(Duration object) => object.inMilliseconds.toString();
}

class DateTimeNullableConverter implements JsonConverter<DateTime?, String?> {
  const DateTimeNullableConverter();

  @override
  DateTime? fromJson(String? json) {
    if (json == null || json == "0" || json == "") {
      return null;
    }
    int? inv = int.tryParse(json);
    if (inv == null) {
      return DateTime.tryParse(json)?.toLocal();
    }

    // seconds
    if (inv.toString().length == 10) {
      inv = inv * 1000;
    }
    return DateTime.fromMillisecondsSinceEpoch(inv);
  }

  @override
  String? toJson(DateTime? object) => object?.millisecondsSinceEpoch.toString();
}

class IntConverter implements JsonConverter<int, String> {
  const IntConverter();

  @override
  int fromJson(String json) {
    var num = int.tryParse(json) ?? 0;
    if (json.endsWith("k")) {
      num = (json.substringBefore("k").doubleValue * 1000).toInt();
    } else if (json.endsWith("w")) {
      num = (json.substringBefore("w").doubleValue * 10000).toInt();
    } else {
      num = (int.tryParse(json) ?? 0);
    }
    return num;
  }

  @override
  String toJson(int object) => object.toString();
}

@freezed
class KurilTradeInfo with _$KurilTradeInfo, WidgetSkeletonModel {
  const factory KurilTradeInfo({
    KurilTradeBuyout? buyout,
    KurilTradeAuction? auction,
    @Default(false) bool widgetSkeleton,
    @Default(false) bool checked,
  }) = _KurilTradeInfo;

  factory KurilTradeInfo.fromJson(Map<String, Object?> json) =>
      _$KurilTradeInfoFromJson(json);
}

@freezed
class TradePurchaseCondition with _$TradePurchaseCondition {
  const factory TradePurchaseCondition({
    @Default("") @JsonKey(name: 'description') String description,
    @Default(false) @JsonKey(name: 'isSatisfied') bool isSatisfied,
  }) = _TradePurchaseCondition;

  factory TradePurchaseCondition.fromJson(Map<String, Object?> json) =>
      _$TradePurchaseConditionFromJson(json);
}

@freezed
@Deprecated("")
class TradeAuction with _$TradeAuction {
  const factory TradeAuction({
    @Default(0) @JsonKey(name: 'currentPrice') double currentPrice,
    @Default("") @JsonKey(name: 'currentBid') String currentBidId,
    @Default(0) @JsonKey(name: 'startPrice') double startPrice,
    @Default("0") @JsonKey(name: 'startTradeTime') String startTradeTime,
    @Default(0) @JsonKey(name: 'premiumPrice') double depositAmount,
    @Default(0) @JsonKey(name: 'hammerPrice') double hammerPrice,
    @Default(0) @JsonKey(name: 'incrementsAmount') num incrementsAmount,
    @Default(0) @JsonKey(name: 'reservePriceInfo') int reserveStatus,
    @Default("") @JsonKey(name: 'score') String score,
    @Default("") @JsonKey(name: 'bidCount') String bidCount,
    @Default("") @JsonKey(name: 'id') String id,
    @Default("") @JsonKey(name: 'tokenId') String tokenId,
    @Default("") @JsonKey(name: 'ownerId') String ownerId,
    @Default("") @JsonKey(name: 'status') String status,
    @Default("0") @JsonKey(name: 'finishTime') String finishTime,
    @JsonKey(name: 'isSubscribe') bool? isSubscribe,
    @JsonKey(name: 'finalOrderId') String? finalOrderId,
    @JsonKey(name: 'currentBidUserId') String? maxBidUserId,
    @Default("")
    @JsonKey(name: 'sellerConfirmDeadLine')
    String sellerConfirmDeadLineMills,
  }) = _TradeAuction;

  factory TradeAuction.fromJson(Map<String, Object?> json) =>
      _$TradeAuctionFromJson(json);
}

@freezed
@Deprecated("")
class TradePrice with _$TradePrice {
  const factory TradePrice({
    @Default(0) @JsonKey(name: 'price') num price,
    @Default("") @JsonKey(name: 'id') String id,
    @Default("0") @JsonKey(name: 'stock') String stock,
    @Default("") @JsonKey(name: 'ownerId') String ownerId,
    @Default("") @JsonKey(name: 'tokenId') String tokenId,
    @Default("0") @JsonKey(name: 'startTradeTime') String startTradeTime,
    @Default("") @JsonKey(name: 'status') String status,
    // （是否满足购买条件）buyQualifications（购买条件细则，已经是否满足）
    // isSatisfyBuyQualification 为true时，展示购买（和以前没区别）
    // isSatisfyBuyQualification 为false时，展示不符合购买资格，具体哪个不符合看细则
    @Default(false)
    @JsonKey(name: 'isSatisfyBuyQualification')
    bool havePurchaseQualification,
    @Default(false) @JsonKey(name: 'isBuyLimit') bool purchaseLimit,
    @Default([])
    @JsonKey(name: 'buyQualifications')
    List<TradePurchaseCondition> purchaseConditions,
  }) = _TradePrice;

  factory TradePrice.fromJson(Map<String, Object?> json) =>
      _$TradePriceFromJson(json);
}

@freezed
class AuctionInfoBean with _$AuctionInfoBean {
  const factory AuctionInfoBean(
          {@JsonKey(name: 'currentPrice') double? currentPrice,
          @JsonKey(name: 'startPrice') double? startPrice,
          @JsonKey(name: 'bidCount') int? bidCount,
          @JsonKey(name: 'finishTime') String? finishTime,
          @JsonKey(name: 'incrementsAmount') num? incrementsAmount,
          @Default(0) @JsonKey(name: 'depositAmount') double depositAmount,
          @JsonKey(name: 'isSubscribe') bool? isSubscribe,
          @JsonKey(name: 'finalOrderId') String? finalOrderId,
          @JsonKey(name: 'maxBidUserId') String? maxBidUserId,
          @JsonKey(name: 'status') String? status,
          @Default("")
          @JsonKey(name: 'sellerConfirmDeadLine')
          String sellerConfirmDeadLineMills,
          @Default(0) @JsonKey(name: 'reservePriceInfo') int reserveStatus}) =
      _AuctionInfoBean;

  factory AuctionInfoBean.fromJson(Map<String, Object?> json) =>
      _$AuctionInfoBeanFromJson(json);
}

@freezed
class ImageBean with _$ImageBean {
  @JsonSerializable(ignoreUnannotated: true)
  const factory ImageBean({
    @Default("") @JsonKey(name: 'url') String url,
    @Default("") @JsonKey(name: 'watermarkMode') String watermarkMode,
    // 原图
    @Default("") @JsonKey(name: 'downloadUrl') String downloadUrl,
    @Default(0) @IntConverter() @JsonKey(name: 'height') int height,
    @IntConverter() @Default(0) @JsonKey(name: 'width') int width,
    @Default("") @JsonKey(name: 'backgroundColor') String backgroundColor,
    @Default("") @JsonKey(name: 'taskId') String taskId,
    @Default("")
    @JsonKey(includeFromJson: false, includeToJson: false)
    String size,
    @Default("")
    @JsonKey(includeFromJson: false, includeToJson: false)
    String path,
    @Default("")
    @JsonKey(includeFromJson: false, includeToJson: false)
    String id,
    @Default("") String mimeType,
  }) = _ImageBean;

  factory ImageBean.fromJson(Map<String, Object?> json) =>
      _$ImageBeanFromJson(json);

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    // squareImageUrl 用 url 兜底
    if (key == "squareImageUrl") {
      if (value == null || value.toString().isEmpty) {
        map[key] = map["url"];
      }
    }
    return value;
  }
}

extension ImageBenExtension on ImageBean {
  String get effectiveUrl => url;

  double get effectiveWidth => double.tryParse(width.toString()) ?? 0;

  double get effectiveHeight => double.tryParse(height.toString()) ?? 0;

  double get whRatio => effectiveWidth * 1.0 / effectiveHeight;
}

@freezed
class NftTokenListDataBean with _$NftTokenListDataBean {
  const factory NftTokenListDataBean({
    @JsonKey(name: 'data') List<TokenBean>? tokenList,
  }) = _NftTokenListDataBean;

  factory NftTokenListDataBean.fromJson(Map<String, Object?> json) =>
      _$NftTokenListDataBeanFromJson(json);
}

class TokenCollection {
/*
{
  "id": "488662944952941107",
  "name": "画作君",
  "logoUrl": "",
  "bannerImageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d6c13170-17dd-11ed-9357-0b15d2af7544.jpg",
  "creator": {
    "address": "0xFA7d6962e8C0f26935A0667E0595e845B54ad475",
    "displayName": "好的创作者",
    "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d0891420-17d9-11ed-9e4a-3574307073f1.jpg",
    "bannerImageUrl": "",
    "userId": "234487063838236644",
    "description": "",
    "createdCollectionCount": "12",
    "isCertified": false,
    "isFollow": false,
    "isCreator": false,
    "createdTokens": [
      {
        "id": "473739582857295622",
        "name": "比啊",
        "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
        "owner": "",
        "collection": "",
        "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
        "tokenIdOnChain": "0",
        "issueTime": "-6795393721871",
        "lastTrxTime": "1656592809000",
        "tradeInfo": {
          "status": "SELLING",
          "type": "AUCTION",
          "tradeOrderId": "471632330167950581",
          "price": 0.01,
          "startTradeTime": "-62135625943000",
          "auctionInfo": {
            "currentPrice": 0.01,
            "startPrice": 0.01,
            "bidCount": 0,
            "finishTime": "-62135625943000",
            "incrementsAmount": 40,
            "depositAmount": 80
          }
        },
        "description": "你",
        "isFollow": false,
        "isModerated": false
      }
    ],
    "addressExploreUrl": "",
    "flowerCount": "0"
  },
  "stats": {
    "tokenCount": 23,
    "ownerCount": 4
  },
  "creatorId": "234487063838236644",
  "contract": {
    "address": "0xE76de79503736F6BbC3B84a159681d96671d2720",
    "contractStandard": "ERC721"
  },
  "ownerNote": "",
  "rightsDescription": "",
  "price": 0,
  "issuer": "临界",
  "imgs": [
    ""
  ],
  "details": "好的作品需要好的人来发现",
  "blockchainExploreAddress": "https://mumbai.polygonscan.com/address/0xE76de79503736F6BbC3B84a159681d96671d2720"
}
*/

  String? id;
  String? name;
  String? logoUrl;
  String? bannerImageUrl;
  UserInfoBean? creator;
  TokenDataTokenCollectionStats? stats;
  String? creatorId;
  TokenDataTokenCollectionContract? contract;
  String? ownerNote;
  String? rightsDescription;
  int? price;
  String? issuer;
  List<String?>? imgs;
  String? details;
  String? blockchainExploreAddress;

  TokenCollection({
    this.id,
    this.name,
    this.logoUrl,
    this.bannerImageUrl,
    this.creator,
    this.stats,
    this.creatorId,
    this.contract,
    this.ownerNote,
    this.rightsDescription,
    this.price,
    this.issuer,
    this.imgs,
    this.details,
    this.blockchainExploreAddress,
  });

  TokenCollection.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    name = json['name']?.toString();
    logoUrl = json['logoUrl']?.toString();
    bannerImageUrl = json['bannerImageUrl']?.toString();
    creator = ((json['creator'] != null && (json['creator'] is Map))
        ? UserInfoBean.fromJson(json['creator'])
        : null);
    stats = (json['stats'] != null && (json['stats'] is Map))
        ? TokenDataTokenCollectionStats.fromJson(json['stats'])
        : null;
    creatorId = json['creatorId']?.toString();
    contract = (json['contract'] != null && (json['contract'] is Map))
        ? TokenDataTokenCollectionContract.fromJson(json['contract'])
        : null;
    ownerNote = json['ownerNote']?.toString();
    rightsDescription = json['rightsDescription']?.toString();
    price = int.tryParse(json['price']?.toString() ?? '');
    issuer = json['issuer']?.toString();
    if (json['imgs'] != null && (json['imgs'] is List)) {
      final v = json['imgs'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      imgs = arr0;
    }
    details = json['details']?.toString();
    blockchainExploreAddress = json['blockchainExploreAddress']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['logoUrl'] = logoUrl;
    data['bannerImageUrl'] = bannerImageUrl;
    if (creator != null) {
      data['creator'] = creator!.toJson();
    }
    if (stats != null) {
      data['stats'] = stats!.toJson();
    }
    data['creatorId'] = creatorId;
    if (contract != null) {
      data['contract'] = contract!.toJson();
    }
    data['ownerNote'] = ownerNote;
    data['rightsDescription'] = rightsDescription;
    data['price'] = price;
    data['issuer'] = issuer;
    if (imgs != null) {
      final v = imgs;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['imgs'] = arr0;
    }
    data['details'] = details;
    data['blockchainExploreAddress'] = blockchainExploreAddress;
    return data;
  }
}

@freezed
class TokenLogBean with _$TokenLogBean {
  const factory TokenLogBean({
    @Default("") @JsonKey(name: 'type') String type,
    @Default("") @JsonKey(name: 'time') String time,
    @JsonKey(name: 'oldHolder') UserInfoBean? oldHolder,
    @JsonKey(name: 'newHolder') UserInfoBean? newHolder,
    @Default(0) @JsonKey(name: 'price') num price,
  }) = _TokenLogBean;

  factory TokenLogBean.fromJson(Map<String, Object?> json) =>
      _$TokenLogBeanFromJson(json);
}

@freezed
class ReviewVersionConfig with _$ReviewVersionConfig {
  const factory ReviewVersionConfig({
    @Default("") @JsonKey(name: 'channel') String channel,
    @Default("") @JsonKey(name: 'versionName') String versionName,
    @Default("") @JsonKey(name: 'versionCode') String versionCode,
    @Default("") @JsonKey(name: 'state') String state,
  }) = _ReviewVersionConfig;

  factory ReviewVersionConfig.fromJson(Map<String, Object?> json) =>
      _$ReviewVersionConfigFromJson(json);
}

extension ReviewVersionConfigExtension on ReviewVersionConfig {
  bool get isReviewing {
    return state == "reviewing";
  }
}

@freezed
class AppVersionBean with _$AppVersionBean {
  const factory AppVersionBean(
      {@Default("") String androidUpdateUrl,
      @Default("") @JsonKey(name: "currentVersion") String versionName,
      @Default(0) @JsonKey(name: "currentVersionCode") int versionCode,
      @Default("") String androidArm64UpdateUrl,
      @Default([])
      @JsonKey(name: 'reviewVersions')
      List<ReviewVersionConfig> reviewVersions,
      @Default([])
      @JsonKey(name: 'updateRules')
      List<UpdateInfoUpdateRules> updateRules}) = _AppVersionBean;

  factory AppVersionBean.fromJson(Map<String, Object?> json) =>
      _$AppVersionBeanFromJson(json);
}

@freezed
class UserBlockBean with _$UserBlockBean {
  const factory UserBlockBean({
    @Default(false) @JsonKey(name: 'isBlocked') bool isBlocked,
    @Default("") @JsonKey(name: 'message') String message,
  }) = _UserBlockBean;

  factory UserBlockBean.fromJson(Map<String, Object?> json) =>
      _$UserBlockBeanFromJson(json);
}

@freezed
class AccountBean with _$AccountBean {
  const factory AccountBean({
    @JsonKey(name: 'account') UserInfoBean? account,
    @JsonKey(name: 'tradeProfile') UserTradeInfo? tradeInfo,
  }) = _AccountBean;

  factory AccountBean.fromJson(Map<String, Object?> json) =>
      _$AccountBeanFromJson(json);
}

@freezed
class UploaderSignResultBean with _$UploaderSignResultBean {
  const factory UploaderSignResultBean({
    @Default("") @JsonKey(name: 'bucketName') String bucketName,
    @Default("") @JsonKey(name: 'dir') String dir,
    @Default("") @JsonKey(name: 'extension') String extension,
    @Default("") @JsonKey(name: 'host') String host,
    @Default("") @JsonKey(name: 'accessId') String accessId,
    @Default("") @JsonKey(name: 'policy') String policy,
    @Default("") @JsonKey(name: 'signature') String signature,
    @Default("") @JsonKey(name: 'expire') String expire,
    @Default("") @JsonKey(name: 'objectName') String objectName,
  }) = _UploaderSignResultBean;

  factory UploaderSignResultBean.fromJson(Map<String, Object?> json) =>
      _$UploaderSignResultBeanFromJson(json);
}

@freezed
class MultiDomainConfig with _$MultiDomainConfig {
  const factory MultiDomainConfig({
    @Default([]) @JsonKey(name: 'apiDomains') List<String> apiDomains,
    @Default([])
    @JsonKey(name: 'configCdnDomains')
    List<String> configCdnDomains,
    @Default([])
    @JsonKey(name: 'recognitionDomains')
    List<String> searchImageBaseUrls,
    @Default([]) @JsonKey(name: 'pullDomainsUrls') List<String> pullDomains,
    @Default([]) @JsonKey(name: 'sensorsDomains') List<String> sensorDomains,
    @Default([]) @JsonKey(name: 'wsDomains') List<String> websocketDomains,
    @Default([]) @JsonKey(name: 'imImageDomains') List<String> imImageDomains,
    @Default([]) @JsonKey(name: 'gCdnDomains') List<String> gcdnDomains,
    @Default([]) @JsonKey(name: 'ubtDomains') List<String> ubtDomains,
  }) = _MultiDomainConfig;

  factory MultiDomainConfig.fromJson(Map<String, Object?> json) =>
      _$MultiDomainConfigFromJson(json);
}

@freezed
class ArtType with _$ArtType {
  static const none = ArtType(name: "", type: "");
  static const all = ArtType(name: "全部", type: "all");
  static const allCommission =
      ArtType(name: "稿位", type: typeCommission, tagId: "1586500");
  static const allToken =
      ArtType(name: "作品", type: "ALL_TOKEN", tagId: "1586499");
  static const allCharacter =
      ArtType(name: "人设", type: typeCharacter, tagId: "1587587");
  static const typeCommission = "ALL_SPACE_FOR_ARTWORK";
  static const typeCharacter = "ALL_CHARACTER";
  static const typeCreature = "CREATURE";
  static const typeText = "TEXT";
  static const typeFinishedWork = "FINISHED_WORK";

  const factory ArtType({
    @Default("") @JsonKey(name: 'name') String name,
    @Default("") @JsonKey(name: 'type') String type,
    @Default("") @JsonKey(name: 'warning') String warning,
    @Default("") @JsonKey(name: 'tagId') String tagId,
    @Default(false) @JsonKey(name: 'disableSale') bool disableSale,
    @Default("") @JsonKey(name: 'titleHint') String titleHint,
    @Default("") @JsonKey(name: 'uploadGuideDes') String uploadGuideDes,
    @Default("") @JsonKey(name: 'parentType') String parentType,
    @Default("") @JsonKey(name: 'parentName') String parentName,
    @Default(false)
    @JsonKey(name: 'canSelectAddWatermark')
    bool canSelectAddWatermark,
    @Default([]) @JsonKey(name: 'secondaryList') List<ArtType> children,
  }) = _ArtType;

  factory ArtType.fromJson(Map<String, Object?> json) =>
      _$ArtTypeFromJson(json);
}

enum SuspectRelatedType {
  token(id: "token", json: "TOKEN", name: "作品"),
  auction(id: "auction", json: "AUCTION", name: "拍卖"),
  buyout(id: "buyout", json: "C2C_PRODUCT", name: "一口价");

  final String id;
  final String json;
  final String name;

  static SuspectRelatedType? getType(String id) {
    return SuspectRelatedType.values.firstWhereOrNull((e) {
      return e.id == id || e.json == id;
    });
  }

  factory SuspectRelatedType.fromTradeType(
    TradeType type, {
    required TradeRelatedType? relateType,
  }) {
    // 不太合理，应该统一对象为挂单
    if (relateType == TradeRelatedType.token) {
      return SuspectRelatedType.token;
    }
    switch (type) {
      case TradeType.buyout:
        return buyout;
      case TradeType.auction:
        return SuspectRelatedType.auction;
      case TradeType.none:
        throw LinjieException(
            message: "TradeType.none -> SuspectRelatedType error");
    }
  }

  const SuspectRelatedType({
    required this.id,
    required this.json,
    required this.name,
  });
}

class SuspectRelatedTypeConverter
    implements JsonConverter<SuspectRelatedType?, String?> {
  const SuspectRelatedTypeConverter();

  @override
  SuspectRelatedType? fromJson(String? json) {
    return SuspectRelatedType.values.firstWhereOrNull((e) {
      return e.json == json;
    });
  }

  @override
  String toJson(SuspectRelatedType? object) => object?.json ?? "";
}

@freezed
class SuspectRelatedObject with _$SuspectRelatedObject {
  const factory SuspectRelatedObject({
    @Default("") @JsonKey(name: 'id') String id,
    @Default("") @JsonKey(name: 'title') String title,
    @Default("") @JsonKey(name: 'cover') String imageUrl,
    @JsonKey(name: 'relatedType') String? type,
  }) = _SuspectRelatedObject;

  factory SuspectRelatedObject.fromJson(Map<String, Object?> json) =>
      _$SuspectRelatedObjectFromJson(json);
}

@freezed
class Suspect with _$Suspect {
  static const none = Suspect();

  const factory Suspect({
    @Default("")
    @JsonKey(name: 'targetId', readValue: Suspect._readValue)
    String relatedId,
    @Default("") @JsonKey(name: 'id') String id,
    @SuspectRelatedTypeConverter()
    @JsonKey(name: 'targetType', readValue: Suspect._readValue)
    SuspectRelatedType? relatedType,
    @Default(TokenBean.none) @JsonKey(name: 'suspectedToken') TokenBean token,
    @Default("") @JsonKey(name: 'creatorId') String creatorId,
    @JsonKey(name: 'relatedObject') SuspectRelatedObject? relatedInfo,
    @JsonKey(name: 'creator') UserInfoBean? creator,
    @JsonKey(name: 'auction') KurilTradeAuction? auction,
    @JsonKey(name: 'product') KurilTradeBuyoutWrapper? buyout,
    @Default(0) @JsonKey(name: 'commentCount') num commentCount,
    @Default([]) @JsonKey(name: 'comments') List<Comment> comments,
    @Default(0) @JsonKey(name: 'likeCount') num likeCount,
    @Default(0) @JsonKey(name: 'dislikeCount') num dislikeCount,
    @Default(0) @JsonKey(name: 'myLike') num myLike,
    @DateTimeNullableConverter()
    @JsonKey(name: 'createdAt')
    DateTime? createdAt,
    @Default("") @JsonKey(name: 'content') String content,
    @Default("") @JsonKey(name: 'reason') String reason,
    @Default([]) @JsonKey(name: 'attachments') List<String> attachments,
  }) = _Suspect;

  factory Suspect.fromJson(Map<String, Object?> json) =>
      _$SuspectFromJson(json);

  factory Suspect.fromNotification(KurilNotification notification) {
    return Suspect(
      createdAt: notification.createdAt,
      relatedId: notification.meta?["suspectRelatedId"]?.toString() ?? "",
      creator: notification.user,
      attachments: [notification.image],
      content: notification.image,
      relatedType: SuspectRelatedType.getType(
          notification.meta?["suspectRelatedType"]?.toString() ?? ""),
      id: notification.meta?["suspectId"]?.toString() ?? "",
    );
  }

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    if (key == "targetType") {
      if (value != null) {
        return value;
      } else {
        final relatedObject = map["relatedObject"];
        if (relatedObject == null || relatedObject is! Map) {
          return null;
        }
        return (relatedObject)["relatedType"];
      }
    }
    if (key == "targetId") {
      final relatedObject = map["relatedObject"];
      if (relatedObject != null && relatedObject is Map) {
        String id = ((relatedObject)["id"]).toString();
        if (id.isNotEmpty) {
          return id;
        }
      }

      final id = (value ?? map["tokenId"]).toString();
      if (id.isNotZeroAndEmpty && id != "null") {
        return id;
      }
      if (map["suspectedToken"] != null && map["suspectedToken"] is Map) {
        return map["suspectedToken"]["id"].toString();
      }
    }
    if (key == "suspectedToken") {
      return value ?? "TOKEN";
    }
    return value;
  }
}

extension SuspectExtension on Suspect {
  String get extTokenId => relatedId.ifEmpty(token.id);

  String get extWebUrl {
    return "${appEnv.currentEnv.webBaseUrl}/suspect-detail?relatedId=$relatedId&relatedType=${relatedType?.id}";
  }

  String get extCoverImageUrl {
    final imageUrl = relatedInfo?.imageUrl ?? "";
    switch (relatedType) {
      case null:
      case SuspectRelatedType.token:
        return (imageUrl).ifEmpty(token.extCoverImageUrl);
      case SuspectRelatedType.auction:
        return (imageUrl).ifEmpty(auction?.extCoverImageUrl ?? "");
      case SuspectRelatedType.buyout:
        return (imageUrl).ifEmpty(buyout?.extCoverImageUrl ?? "");
    }
  }

  String get extName {
    final name = relatedInfo?.title ?? "";
    switch (relatedType) {
      case null:
      case SuspectRelatedType.token:
        return name.ifEmpty(token.name);
      case SuspectRelatedType.auction:
        return name.ifEmpty(auction?.extName ?? "");
      case SuspectRelatedType.buyout:
        return name.ifEmpty(buyout?.extName ?? "");
    }
  }
}

class LinjieBean<T> {
  final String id;
  final String name;
  final T? data;

//<editor-fold desc="Data Methods">
  const LinjieBean({
    required this.id,
    this.name = "",
    this.data,
  });

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is LinjieBean &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          data == other.data);

  @override
  int get hashCode => id.hashCode ^ name.hashCode ^ data.hashCode;

  @override
  String toString() {
    return 'LinjieBean{ id: $id, name: $name, data: $data,}';
  }

  LinjieBean<T> copyWith({
    String? id,
    String? name,
    T? data,
  }) {
    return LinjieBean(
      id: id ?? this.id,
      name: name ?? this.name,
      data: data ?? this.data,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': this.id,
      'name': this.name,
    };
  }

  factory LinjieBean.fromJson(Map<String, dynamic> map) {
    return LinjieBean(
      id: (map['id'] ?? map['key']) as String,
      name: map['name'] as String,
    );
  }

//</editor-fold>
}

@freezed
class CreatorApplication with _$CreatorApplication {
  const factory CreatorApplication({
    @Default("") @JsonKey(name: 'id') String id,
    @Default([]) @JsonKey(name: 'tokens') List<TokenBean> tokens,
    @Default("") @JsonKey(name: 'createdAt') String createdAt,
    @Default("") @JsonKey(name: 'approvedAt') String approvedAt,
    @Default(0) @JsonKey(name: 'approveCount') int approveNum,
    @Default(0) @JsonKey(name: 'rejectCount') int rejectNum,
    @Default(0) @JsonKey(name: 'voteType') int voteType,
    @JsonKey(name: 'applicant') UserInfoBean? user,
    @Default(false) bool autoGetCertification,
    @Default([])
    @JsonKey(name: 'snapshot')
    List<CreatorApplicationSnapshot> snapshot,
  }) = _CreatorApplication;

  factory CreatorApplication.fromJson(Map<String, Object?> json) =>
      _$CreatorApplicationFromJson(json);
}

@freezed
class CreatorApplicationSnapshot with _$CreatorApplicationSnapshot {
  const factory CreatorApplicationSnapshot({
    @Default("") @JsonKey(name: 'tokenId') String tokenId,
    @Default([]) @JsonKey(name: 'covers') List<String> covers,
  }) = _CreatorApplicationSnapshot;

  factory CreatorApplicationSnapshot.fromJson(Map<String, Object?> json) =>
      _$CreatorApplicationSnapshotFromJson(json);
}

@freezed
class CreatorCertificationConfig with _$CreatorCertificationConfig {
  const factory CreatorCertificationConfig({
    @Default([]) @JsonKey(name: 'flow') List<String> flow,
    @Default([])
    @JsonKey(name: 'conditionsForParticipation')
    List<String> conditionsForParticipation,
    @JsonKey(name: 'standard') CreatorTrailStandard? standard,
    @Default("") @JsonKey(name: 'approveButton') String approveButton,
    @Default("") @JsonKey(name: 'disapproveButton') String disapproveButton,
  }) = _CreatorCertificationConfig;

  factory CreatorCertificationConfig.fromJson(Map<String, Object?> json) =>
      _$CreatorCertificationConfigFromJson(json);
}

@freezed
class KurilStandProduct with _$KurilStandProduct {
  const factory KurilStandProduct({
    @Default("") @JsonKey(name: 'name') String name,
    @Default("") @JsonKey(name: 'description') String description,
    @TradeRelatedTypeConverter()
    @JsonKey(name: 'productType')
    TradeRelatedType? relatedType,
    @JsonKey(name: 'commissionInfo') CommissionBean? commissionInfo,
    @Deprecated("") @JsonKey(name: 'attachments') List<String>? attachments,
    @Default([])
    @JsonKey(name: 'attachmentsV2')
    List<C2cAttachment> attachmentsV2,
  }) = _KurilStandProduct;

  factory KurilStandProduct.fromJson(Map<String, Object?> json) =>
      _$KurilStandProductFromJson(json);

  factory KurilStandProduct.fromCommission(CommissionBean commissionBean) {
    return KurilStandProduct(
      name: commissionBean.title,
      description: commissionBean.des,
      commissionInfo: commissionBean,
      relatedType: TradeRelatedType.commission,
      attachmentsV2: commissionBean.attachments,
    );
  }
}

extension KurilStandProductExtension on KurilStandProduct {
  List<C2cAttachment> get extAttachments {
    if (attachmentsV2.isNotEmpty) {
      return attachmentsV2;
    }
    return (attachments ?? [])
        .map((e) => C2cAttachment(
              url: e,
              relatedType: C2cAttachmentRelatedType.image,
            ))
        .toList();
  }
}

@freezed
class CreatorTrailStandard with _$CreatorTrailStandard {
  const factory CreatorTrailStandard({
    @Default("") @JsonKey(name: 'title') String title,
    @Default("") @JsonKey(name: 'approve') String approve,
    @Default("") @JsonKey(name: 'disapprove') String disapprove,
    @Default([]) @JsonKey(name: 'prohibitedTypes') List<String> prohibitedTypes,
  }) = _CreatorTrailStandard;

  factory CreatorTrailStandard.fromJson(Map<String, Object?> json) =>
      _$CreatorTrailStandardFromJson(json);
}

@freezed
class WithdrawLog with _$WithdrawLog {
  const factory WithdrawLog({
    @Default("") @JsonKey(name: 'id') String id,
    @Default("") @JsonKey(name: 'userId') String userId,
    @Default("") @JsonKey(name: 'outTradeNo') String outTradeNo,
    @Default(0) @JsonKey(name: 'amount') double amount,
    @Default("") @JsonKey(name: 'paidAt') String paidAt,
    @Default("") @JsonKey(name: 'remark') String remark,
    @Default("") @JsonKey(name: 'ip') String ip,
    @Default("") @JsonKey(name: 'openId') String openId,
    @Default("") @JsonKey(name: 'createdAt') String createdAt,
    @Default("") @JsonKey(name: 'updatedAt') String updatedAt,
    @Default("") @JsonKey(name: 'packageName') String packageName,
    @Default("") @JsonKey(name: 'channel') String channel,
    @Default("") @JsonKey(name: 'status') String status,
    @Default("") @JsonKey(name: 'channelName') String channelName,
    @Default("") @JsonKey(name: 'accountName') String accountName,
    @Default("") @JsonKey(name: 'statusName') String statusName,
    @Default("") @JsonKey(name: 'statusColor') String statusColor,
    @Default("") @JsonKey(name: 'walletId') String walletId,
  }) = _WithdrawLog;

  factory WithdrawLog.fromJson(Map<String, Object?> json) =>
      _$WithdrawLogFromJson(json);
}

@freezed
class KurilTradeAuction
    with _$KurilTradeAuction
    implements WidgetSkeletonModel {
  static const none = KurilTradeAuction();

  const factory KurilTradeAuction({
    @Default("") @JsonKey(name: 'id') String id,
    @Default("") @JsonKey(name: 'title') String title,
    @Default("")
    @JsonKey(name: 'cover', readValue: KurilTradeAuction._readValue)
    String imageUrl,
    @Default("")
    @JsonKey(name: 'moderateRejectReason')
    String moderateRejectReason,
    @TradeRiskStateConverter()
    @Default(TradeRiskState.none)
    @JsonKey(name: 'abnormalState')
    TradeRiskState riskState,
    @Default("") @JsonKey(name: 'description') String description,
    @Default("") @JsonKey(name: 'orderId') String orderId,
    @Default(0) @JsonKey(name: 'status') int status,
    @Default(0) @JsonKey(name: 'priority') int priority,
    @Default(0)
    @JsonKey(name: 'currentBidsCount', readValue: KurilTradeAuction._readValue)
    int bidCount,
    @Default(0)
    @JsonKey(name: 'bidderCount', readValue: KurilTradeAuction._readValue)
    int bidderCount,
    @Default(0) @JsonKey(name: 'startingPrice') double startPrice,
    @Default(false) @JsonKey(name: 'isLeader') bool maxBidderIsMe,
    @Default(0) @JsonKey(name: 'reversePrice') double reversePrice,
    @Default("") @JsonKey(name: 'sellerConfirmDeadLine') String reverseTime,
    //是否已成交
    @Default(false) @JsonKey(name: 'isPerformance') bool isPerformance,
    @Default(0)
    @JsonKey(name: 'currentPrice', readValue: KurilTradeAuction._readValue)
    double currentPrice,
    @Default(0) @JsonKey(name: 'myCurrentPrice') double myCurrentPrice,
    @Default(0) @JsonKey(name: 'myAutoBidPrice') double myAutoBidPrice,
    @Default("") @JsonKey(name: 'buyerId') String buyerId,
    @DateTimeNullableConverter()
    @JsonKey(name: 'createTime')
    DateTime? createTime,
    @Default("") @JsonKey(name: 'startTime') String startTime,
    @Default("") @JsonKey(name: 'finishTime') String finishTime,
    @Default(0) @JsonKey(name: 'followCount') int subscriberCount,
    @Default(false) @JsonKey(name: 'isFollow') bool subscribed,
    @JsonKey(name: 'seller') UserInfoBean? seller,
    @JsonKey(name: 'buyer') UserInfoBean? buyer,
    @JsonKey(name: 'order') OrderBean? order,
    @Default(0) @JsonKey(name: 'depositMoney') double depositMoney,
    @Default(0) @JsonKey(name: 'hammerPrice') double hammerPrice,
    @Default(0) @JsonKey(name: 'sellerDepositMoney') double sellerDepositMoney,
    @Default(false) @JsonKey(name: 'isNeedPayDeposit') bool isNeedPayDeposit,
    @Default(false) @JsonKey(name: 'isMy') bool isMy,
    @Default(0) @JsonKey(name: 'incrementsAmount') double incrementsAmount,
    @Default("") @JsonKey(name: 'reviewStatus') String reviewStatus,
    @Default("") @JsonKey(name: 'reviewStatusReason') String reviewStatusReason,
    @Default("") @JsonKey(name: 'queryStatus') String queryStatus,
    @Default("") @JsonKey(name: 'type') String type,
    @Default("") @JsonKey(name: 'tokenId') String tokenId,
    @Default([]) @JsonKey(name: 'tagIds') List<String> tagIds,
    @JsonKey(name: 'token') TokenBean? token,
    @JsonKey(name: 'standardProduct') KurilStandProduct? sp,
    @TradeRelatedTypeConverter()
    @JsonKey(name: 'productType', readValue: KurilTradeAuction._readValue)
    TradeRelatedType? relatedType,
    @Default(false) bool showOriginLabel,
    String? requestId,
    // 所属拍场
    @JsonKey(name: 'field', readValue: KurilTradeAuction._readValue)
    AuctionEvent? event,
    @Default("")
    @JsonKey(name: 'auctionFieldId', readValue: KurilTradeAuction._readValue)
    String eventId,
    @Default(false) bool widgetSkeleton,
  }) = _KurilTradeAuction;

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    if (key == "cover") {
      final squareImage = map["squareImage"]?.toString();
      if (squareImage != null && squareImage.isNotEmpty) return squareImage;
      return value;
    }
    if (key == "currentBidsCount") {
      return int.tryParse((value ?? map["currentBidderCount"]).toString()) ?? 0;
    }
    if (key == "bidderCount" && value != null) {
      return int.tryParse(value) ?? 0;
    }
    // rewrite type，COMMISSION 混入了老的 token-commission
    if (key == "productType") {
      try {
        if (value == TradeRelatedType.commission.json) {
          final hasTokenData = (map["token"] != null &&
                  map["token"]["id"] != null &&
                  map["token"]["id"] != "0") ||
              (map["tokenId"] != null && map["tokenId"] != "0");
          if (hasTokenData) {
            map["productType"] = TradeRelatedType.token.json;
            return TradeRelatedType.token.json;
          }
        }
      } catch (e) {
        //
      }
      return value;
    }
    return value;
  }

  factory KurilTradeAuction.fromJson(Map<String, Object?> json) =>
      _$KurilTradeAuctionFromJson(json);
}

@freezed
class KurilTradeBuyoutWrapper with _$KurilTradeBuyoutWrapper {
  static const none = KurilTradeBuyoutWrapper();

  const factory KurilTradeBuyoutWrapper({
    @Default(KurilTradeBuyout.none)
    @JsonKey(name: 'product', readValue: KurilTradeBuyoutWrapper._readValue)
    KurilTradeBuyout product,
    @JsonKey(name: 'otherDetail') KurilTradeBuyoutOther? other,
    @JsonKey(name: 'seller') UserInfoBean? seller,
    @JsonKey(name: 'token') TokenBean? token,
    @Default(false) bool showOriginLabel,
    @JsonKey(name: 'standardProduct') KurilStandProduct? sp,
  }) = _KurilTradeBuyoutWrapper;

  factory KurilTradeBuyoutWrapper.fromJson(Map<String, Object?> json) =>
      _$KurilTradeBuyoutWrapperFromJson(json);

  factory KurilTradeBuyoutWrapper.fromBuyout(KurilTradeBuyout buyout) =>
      KurilTradeBuyoutWrapper(
          product: buyout,
          token: buyout.token,
          sp: buyout.sp,
          seller: buyout.seller,
          other: KurilTradeBuyoutOther(
            sellCount: buyout.sellCount,
            favoriteCount: buyout.favoriteCount,
            isFavorite: buyout.isFavorite,
            sp: buyout.sp,
          ));

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    // rewrite type，COMMISSION 混入了老的 token-commission
    if (key == "product") {
      try {
        Map<dynamic, dynamic> product = map["product"];
        if (product["type"] == TradeRelatedType.commission.json) {
          final hasTokenData = (map["token"] != null &&
                  map["token"]["id"] != null &&
                  map["token"]["id"] != "0") ||
              (product["tokenId"] != null && product["tokenId"] != "0");
          if (hasTokenData) {
            product["type"] = TradeRelatedType.token.json;
          }
        }
      } catch (e) {
        //
      }
      return value;
    }
    return value;
  }
}

extension KurilTradeBuyoutWrapperExtension on KurilTradeBuyoutWrapper {
  String get extName {
    String name = product.title;
    switch (product.relatedType) {
      case null:
        break;
      case TradeRelatedType.token:
        name = product.title.ifEmpty(token?.name ?? "");
        break;
      case TradeRelatedType.commission:
        name = product.title.ifEmpty((other?.sp ?? sp)?.name ?? "");
        break;
    }
    return name;
  }

  TokenBean? get extToken {
    final token = (this.token ?? product.token);
    switch (product.relatedType) {
      case TradeRelatedType.commission:
        break;
      case null:
        break;
      case TradeRelatedType.token:
        return token ??
            TokenBean(
              id: (token?.id ?? "").ifEmpty(product.tokenId),
              imageUrl: extCoverImageUrl,
              name: extName,
            );
    }
    return null;
  }

  String get extRelatedId {
    switch (product.relatedType) {
      case TradeRelatedType.commission:
        break;
      case null:
        break;
      case TradeRelatedType.token:
        return product.tokenId.ifEmpty((token ?? product.token)?.id ?? "");
    }
    return "";
  }

  String get extCoverImageUrl {
    String imageUrl = product.imageUrl;
    switch (product.relatedType) {
      case null:
        break;
      case TradeRelatedType.token:
        imageUrl = imageUrl.ifEmpty(token?.extCoverImageUrl ?? "");
        break;
      case TradeRelatedType.commission:
        imageUrl = imageUrl.ifEmpty(
          CommissionBean.fromSp(other?.sp ?? sp).attachments.firstOrNull?.url ??
              "",
        );
        break;
    }
    return imageUrl;
  }
}

@freezed
class KurilTradeBuyoutOther with _$KurilTradeBuyoutOther {
  static const none = KurilTradeBuyoutOther();

  const factory KurilTradeBuyoutOther({
    @Default(0) @JsonKey(name: 'sellCount') int sellCount,
    @Default(0) @JsonKey(name: 'favoriteCount') int favoriteCount,
    @Default(false) @JsonKey(name: 'isFavorite') bool isFavorite,
    @Default([]) @JsonKey(name: 'attachments') List<C2cAttachment> attachments,
    @JsonKey(name: 'standardProduct') KurilStandProduct? sp,
  }) = _KurilTradeBuyoutOther;

  factory KurilTradeBuyoutOther.fromJson(Map<String, Object?> json) =>
      _$KurilTradeBuyoutOtherFromJson(json);
}

class TradeRelatedTypeConverter
    implements JsonConverter<TradeRelatedType?, String> {
  const TradeRelatedTypeConverter();

  @override
  TradeRelatedType? fromJson(String json) {
    if (json == "COMMON") return TradeRelatedType.token;
    return TradeRelatedType.values
        .firstWhereOrNull((element) => element.json == json);
  }

  @override
  String toJson(TradeRelatedType? object) => object?.json ?? "";
}

@freezed
class KurilTradeBuyout with _$KurilTradeBuyout {
  static const none = KurilTradeBuyout();

  const factory KurilTradeBuyout({
    @Default("") @JsonKey(name: 'title') String title,
    @Default("")
    @JsonKey(name: 'cover', readValue: KurilTradeBuyout._readValue)
    String imageUrl,
    @Default("") @JsonKey(name: 'remark') String description,
    @Default("")
    @JsonKey(name: 'id', readValue: KurilTradeBuyout._readValue)
    String id,
    @Default("") @JsonKey(name: 'tokenId') String tokenId,
    @Default("")
    @JsonKey(name: 'moderateRejectReason')
    String moderateRejectReason,
    @TradeRiskStateConverter()
    @Default(TradeRiskState.none)
    @JsonKey(name: 'abnormalState')
    TradeRiskState riskState,
    @JsonKey(name: 'token') TokenBean? token,
    @Default(0) @JsonKey(name: 'priority') int priority,
    @JsonKey(name: 'standardProduct') KurilStandProduct? sp,
    //OFF_SALE,上架:ON_SALE
    @_KurilBuyoutStatusConverter()
    @Default(KurilBuyoutStatus.none)
    @JsonKey(name: 'status')
    KurilBuyoutStatus status,
    @Default("") @JsonKey(name: 'startTime') String startTime,
    @DateTimeNullableConverter()
    @JsonKey(name: 'createTime')
    DateTime? createTime,
    @Default("") @JsonKey(name: 'sellerId') String sellerId,
    @JsonKey(name: 'seller') UserInfoBean? seller,
    @Default(false) @JsonKey(name: 'isFavorite') bool isFavorite,
    @Default(0) @JsonKey(name: 'price') double price,
    @Default(0) @JsonKey(name: 'underwayOrderCount') double underwayOrderCount,
    @Default(0) @JsonKey(name: 'stock') int stock,
    @Default(0) @JsonKey(name: 'sellCount') int sellCount,
    // 上架
    @JsonKey(includeFromJson: false, includeToJson: false) bool? release,
    @Default(0) @JsonKey(name: 'favoriteCount') int favoriteCount,
    @Default([]) @JsonKey(name: 'tagIds') List<String> tagIds,

    // COMMISSION / TOKEN
    @TradeRelatedTypeConverter()
    @JsonKey(name: 'type')
    TradeRelatedType? relatedType,
    @Default(false) bool showOriginLabel,
    String? requestId,
  }) = _KurilTradeBuyout;

  factory KurilTradeBuyout.fromJson(Map<String, Object?> json) =>
      _$KurilTradeBuyoutFromJson(json);

  factory KurilTradeBuyout.fromWrapper(KurilTradeBuyoutWrapper wrapper) {
    final sp = wrapper.sp ?? wrapper.other?.sp;
    KurilTradeBuyout buyout = wrapper.product.copyWith(
      isFavorite: wrapper.other?.isFavorite ?? false,
      favoriteCount: wrapper.other?.favoriteCount ?? 0,
      sellCount: wrapper.other?.sellCount ?? 0,
      seller: wrapper.seller,
      token: wrapper.token ?? wrapper.product.token,
      sellerId: (wrapper.seller?.id) ?? wrapper.product.sellerId,
      sp: sp,
    );

    if (sp?.commissionInfo != null) {
      buyout = buyout.copyWith(
        sp: sp?.copyWith.commissionInfo!(
          artTypes: wrapper.product.extArtTypes,
        ),
      );
    }
    return buyout;
  }

  static Object? _readValue(Map<dynamic, dynamic> map, String key) {
    final value = map[key];
    if (key == "cover") {
      final squareImage = map["squareImage"]?.toString();
      if (squareImage != null && squareImage.isNotEmpty) return squareImage;
      return value;
    }
    if (key == "id") {
      return value ?? map["saleOrderId"];
    }
    return value;
  }
}

extension KurilTradeBuyoutExtension on KurilTradeBuyout {
  DateTime get startDateTime =>
      DateTime.fromMillisecondsSinceEpoch(int.tryParse(startTime) ?? 0);

  bool get isNotStart =>
      LinjieDateUtil.currentTimeMillis < startDateTime.millisecondsSinceEpoch;

  String get extPostImageUrl {
    switch (relatedType) {
      case TradeRelatedType.commission:
        String res =
            "${appEnv.currentEnv.apiBaseUrl}/z/poster-web/_poster/get-nft-product-poster?tradeId=$id&tradeType=c2c&_from=h5";
        if (appEnv.currentEnv.isDev) {
          res += "&_env=dev";
        }
        if (appEnv.echoingEnv.isNotEmpty) {
          res += "&_version=${appEnv.echoingEnv}";
        }
        return res;
        break;
      case null:
      case TradeRelatedType.token:
        return "${appEnv.currentEnv.apiBaseUrl}/z/poster-web/_poster/get-nft-product-poster?tradeId=$id&tokenId=${token?.id}&tradeType=c2c";
        break;
    }
  }

  String get extWebUrl {
    return "${appEnv.currentEnv.webBaseUrl}/product-detail?tradeId=$id";
  }

  List<ArtType> get extArtTypes {
    return tagIds
        .map((e) {
          return ConfigManager.instance.getArtTypeByTagId(e);
        })
        .where((e) => e != ArtType.none)
        .toList();
  }

  bool get isMine {
    if (!UserManager.instance.isLogin()) {
      return false;
    }
    return sellerId == UserManager.instance.id;
  }

  bool get isLinjieType {
    return relatedType != null;
  }

  TokenBean? get extToken {
    switch (relatedType) {
      case TradeRelatedType.commission:
        break;
      case null:
        break;
      case TradeRelatedType.token:
        return token ??
            TokenBean(
              id: (token?.id ?? "").ifEmpty(tokenId),
              imageUrl: extCoverImageUrl,
              name: extName,
            );
    }
    return null;
  }

  String get extRelatedId {
    switch (relatedType) {
      case TradeRelatedType.commission:
        break;
      case null:
        break;
      case TradeRelatedType.token:
        return tokenId.ifEmpty((token)?.id ?? "");
    }
    return "";
  }

  Size getCoverSize(double maxWidth) {
    final size = PostUtil.getAspectRatioSizeByUrl(extCoverImageUrl,
        maxWidth: maxWidth,
        minWidth: maxWidth,
        defaultSize: Size(maxWidth, maxWidth));
    return size;
  }

  String get extCoverImageUrl {
    switch (relatedType) {
      case null:
        break;
      case TradeRelatedType.commission:
        return imageUrl.ifEmpty(
            CommissionBean.fromBuyout(this).attachments.firstOrNull?.url ?? "");
      case TradeRelatedType.token:
        return imageUrl.ifEmpty(token?.extCoverImageUrl ?? "");
    }
    return imageUrl;
  }

  String get extName {
    if (title.isNotEmpty) {
      return title;
    }
    switch (relatedType) {
      case null:
        break;
      case TradeRelatedType.commission:
        return sp?.name ?? "";
      case TradeRelatedType.token:
        return token?.name ?? "";
    }
    return "";
  }

  String get extDescription {
    if (description.isNotEmpty) {
      return description;
    }
    switch (relatedType) {
      case null:
        break;
      case TradeRelatedType.commission:
        return sp?.description ?? "";
      case TradeRelatedType.token:
        return token?.description ?? "";
    }
    return "";
  }
}

class _KurilBuyoutStatusConverter
    implements JsonConverter<KurilBuyoutStatus, String> {
  const _KurilBuyoutStatusConverter();

  @override
  KurilBuyoutStatus fromJson(String json) {
    return KurilBuyoutStatus.values
            .firstWhereOrNull((element) => element.id == json) ??
        KurilBuyoutStatus.none;
  }

  @override
  String toJson(KurilBuyoutStatus object) => object.id;
}

///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class TokenDataTokenTradeInfoAuctionInfo {
/*
{
  "currentPrice": 0.01,
  "startPrice": 0.01,
  "bidCount": 0,
  "finishTime": "-62135625943000",
  "incrementsAmount": 20,
  "depositAmount": 0,
  "isSubscribe": false,
  "finalOrderId": "0",
  "maxBidUserId": "0",
  "status": "22"
}
*/

  double? currentPrice;
  double? startPrice;
  int? bidCount;
  String? finishTime;
  int? incrementsAmount;
  int? depositAmount;
  bool? isSubscribe;
  String? finalOrderId;
  String? maxBidUserId;
  String? status;

  TokenDataTokenTradeInfoAuctionInfo({
    this.currentPrice,
    this.startPrice,
    this.bidCount,
    this.finishTime,
    this.incrementsAmount,
    this.depositAmount,
    this.isSubscribe,
    this.finalOrderId,
    this.maxBidUserId,
    this.status,
  });

  TokenDataTokenTradeInfoAuctionInfo.fromJson(Map<String, dynamic> json) {
    currentPrice = double.tryParse(json['currentPrice']?.toString() ?? '');
    startPrice = double.tryParse(json['startPrice']?.toString() ?? '');
    bidCount = int.tryParse(json['bidCount']?.toString() ?? '');
    finishTime = json['finishTime']?.toString();
    incrementsAmount = int.tryParse(json['incrementsAmount']?.toString() ?? '');
    depositAmount = int.tryParse(json['depositAmount']?.toString() ?? '');
    isSubscribe = json['isSubscribe'];
    finalOrderId = json['finalOrderId']?.toString();
    maxBidUserId = json['maxBidUserId']?.toString();
    status = json['status']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['currentPrice'] = currentPrice;
    data['startPrice'] = startPrice;
    data['bidCount'] = bidCount;
    data['finishTime'] = finishTime;
    data['incrementsAmount'] = incrementsAmount;
    data['depositAmount'] = depositAmount;
    data['isSubscribe'] = isSubscribe;
    data['finalOrderId'] = finalOrderId;
    data['maxBidUserId'] = maxBidUserId;
    data['status'] = status;
    return data;
  }
}

class TokenDataTokenTradeInfo {
/*
{
  "status": "SOLD_OUT",
  "type": "SALE",
  "tradeOrderId": "0",
  "price": 0.01,
  "startTradeTime": "0",
  "auctionInfo": {
    "currentPrice": 0.01,
    "startPrice": 0.01,
    "bidCount": 0,
    "finishTime": "-62135625943000",
    "incrementsAmount": 20,
    "depositAmount": 0,
    "isSubscribe": false,
    "finalOrderId": "0",
    "maxBidUserId": "0",
    "status": "22"
  }
}
*/

  String? status;
  String? type;
  String? tradeOrderId;
  double? price;
  String? startTradeTime;
  TokenDataTokenTradeInfoAuctionInfo? auctionInfo;

  TokenDataTokenTradeInfo({
    this.status,
    this.type,
    this.tradeOrderId,
    this.price,
    this.startTradeTime,
    this.auctionInfo,
  });

  TokenDataTokenTradeInfo.fromJson(Map<String, dynamic> json) {
    status = json['status']?.toString();
    type = json['type']?.toString();
    tradeOrderId = json['tradeOrderId']?.toString();
    price = double.tryParse(json['price']?.toString() ?? '');
    startTradeTime = json['startTradeTime']?.toString();
    auctionInfo = (json['auctionInfo'] != null && (json['auctionInfo'] is Map))
        ? TokenDataTokenTradeInfoAuctionInfo.fromJson(json['auctionInfo'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['type'] = type;
    data['tradeOrderId'] = tradeOrderId;
    data['price'] = price;
    data['startTradeTime'] = startTradeTime;
    if (auctionInfo != null) {
      data['auctionInfo'] = auctionInfo!.toJson();
    }
    return data;
  }
}

class TokenDataTokenCollectionContract {
/*
{
  "address": "0xE76de79503736F6BbC3B84a159681d96671d2720",
  "contractStandard": "ERC721"
}
*/

  String? address;
  String? contractStandard;

  TokenDataTokenCollectionContract({
    this.address,
    this.contractStandard,
  });

  TokenDataTokenCollectionContract.fromJson(Map<String, dynamic> json) {
    address = json['address']?.toString();
    contractStandard = json['contractStandard']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['address'] = address;
    data['contractStandard'] = contractStandard;
    return data;
  }
}

class TokenDataTokenCollectionStats {
/*
{
  "tokenCount": 23,
  "ownerCount": 4
}
*/

  int? tokenCount;
  int? ownerCount;

  TokenDataTokenCollectionStats({
    this.tokenCount,
    this.ownerCount,
  });

  TokenDataTokenCollectionStats.fromJson(Map<String, dynamic> json) {
    tokenCount = int.tryParse(json['tokenCount']?.toString() ?? '');
    ownerCount = int.tryParse(json['ownerCount']?.toString() ?? '');
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['tokenCount'] = tokenCount;
    data['ownerCount'] = ownerCount;
    return data;
  }
}

class TokenDataTokenCollectionCreatorCreatedTokensTradeInfoAuctionInfo {
/*
{
  "currentPrice": 0.01,
  "startPrice": 0.01,
  "bidCount": 0,
  "finishTime": "-62135625943000",
  "incrementsAmount": 40,
  "depositAmount": 80
}
*/

  double? currentPrice;
  double? startPrice;
  int? bidCount;
  String? finishTime;
  int? incrementsAmount;
  int? depositAmount;

  TokenDataTokenCollectionCreatorCreatedTokensTradeInfoAuctionInfo({
    this.currentPrice,
    this.startPrice,
    this.bidCount,
    this.finishTime,
    this.incrementsAmount,
    this.depositAmount,
  });

  TokenDataTokenCollectionCreatorCreatedTokensTradeInfoAuctionInfo.fromJson(
      Map<String, dynamic> json) {
    currentPrice = double.tryParse(json['currentPrice']?.toString() ?? '');
    startPrice = double.tryParse(json['startPrice']?.toString() ?? '');
    bidCount = int.tryParse(json['bidCount']?.toString() ?? '');
    finishTime = json['finishTime']?.toString();
    incrementsAmount = int.tryParse(json['incrementsAmount']?.toString() ?? '');
    depositAmount = int.tryParse(json['depositAmount']?.toString() ?? '');
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['currentPrice'] = currentPrice;
    data['startPrice'] = startPrice;
    data['bidCount'] = bidCount;
    data['finishTime'] = finishTime;
    data['incrementsAmount'] = incrementsAmount;
    data['depositAmount'] = depositAmount;
    return data;
  }
}

class TokenDataTokenCollectionCreatorCreatedTokensTradeInfo {
/*
{
  "status": "SELLING",
  "type": "AUCTION",
  "tradeOrderId": "471632330167950581",
  "price": 0.01,
  "startTradeTime": "-62135625943000",
  "auctionInfo": {
    "currentPrice": 0.01,
    "startPrice": 0.01,
    "bidCount": 0,
    "finishTime": "-62135625943000",
    "incrementsAmount": 40,
    "depositAmount": 80
  }
}
*/

  String? status;
  String? type;
  String? tradeOrderId;
  double? price;
  String? startTradeTime;
  TokenDataTokenCollectionCreatorCreatedTokensTradeInfoAuctionInfo? auctionInfo;

  TokenDataTokenCollectionCreatorCreatedTokensTradeInfo({
    this.status,
    this.type,
    this.tradeOrderId,
    this.price,
    this.startTradeTime,
    this.auctionInfo,
  });

  TokenDataTokenCollectionCreatorCreatedTokensTradeInfo.fromJson(
      Map<String, dynamic> json) {
    status = json['status']?.toString();
    type = json['type']?.toString();
    tradeOrderId = json['tradeOrderId']?.toString();
    price = double.tryParse(json['price']?.toString() ?? '');
    startTradeTime = json['startTradeTime']?.toString();
    auctionInfo = (json['auctionInfo'] != null && (json['auctionInfo'] is Map))
        ? TokenDataTokenCollectionCreatorCreatedTokensTradeInfoAuctionInfo
            .fromJson(json['auctionInfo'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['type'] = type;
    data['tradeOrderId'] = tradeOrderId;
    data['price'] = price;
    data['startTradeTime'] = startTradeTime;
    if (auctionInfo != null) {
      data['auctionInfo'] = auctionInfo!.toJson();
    }
    return data;
  }
}

class TokenDataTokenCollectionCreatorCreatedTokens {
/*
{
  "id": "473739582857295622",
  "name": "比啊",
  "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
  "owner": "",
  "collection": "",
  "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
  "tokenIdOnChain": "0",
  "issueTime": "-6795393721871",
  "lastTrxTime": "1656592809000",
  "tradeInfo": {
    "status": "SELLING",
    "type": "AUCTION",
    "tradeOrderId": "471632330167950581",
    "price": 0.01,
    "startTradeTime": "-62135625943000",
    "auctionInfo": {
      "currentPrice": 0.01,
      "startPrice": 0.01,
      "bidCount": 0,
      "finishTime": "-62135625943000",
      "incrementsAmount": 40,
      "depositAmount": 80
    }
  },
  "description": "你",
  "isFollow": false,
  "isModerated": false
}
*/

  String? id;
  String? name;
  String? imageUrl;
  String? owner;
  String? collection;
  String? lastTrxHash;
  String? tokenIdOnChain;
  String? issueTime;
  String? lastTrxTime;
  TokenDataTokenCollectionCreatorCreatedTokensTradeInfo? tradeInfo;
  String? description;
  bool? isFollow;
  bool? isModerated;

  TokenDataTokenCollectionCreatorCreatedTokens({
    this.id,
    this.name,
    this.imageUrl,
    this.owner,
    this.collection,
    this.lastTrxHash,
    this.tokenIdOnChain,
    this.issueTime,
    this.lastTrxTime,
    this.tradeInfo,
    this.description,
    this.isFollow,
    this.isModerated,
  });

  TokenDataTokenCollectionCreatorCreatedTokens.fromJson(
      Map<String, dynamic> json) {
    id = json['id']?.toString();
    name = json['name']?.toString();
    imageUrl = json['imageUrl']?.toString();
    owner = json['owner']?.toString();
    collection = json['collection']?.toString();
    lastTrxHash = json['lastTrxHash']?.toString();
    tokenIdOnChain = json['tokenIdOnChain']?.toString();
    issueTime = json['issueTime']?.toString();
    lastTrxTime = json['lastTrxTime']?.toString();
    tradeInfo = (json['tradeInfo'] != null && (json['tradeInfo'] is Map))
        ? TokenDataTokenCollectionCreatorCreatedTokensTradeInfo.fromJson(
            json['tradeInfo'])
        : null;
    description = json['description']?.toString();
    isFollow = json['isFollow'];
    isModerated = json['isModerated'];
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['imageUrl'] = imageUrl;
    data['owner'] = owner;
    data['collection'] = collection;
    data['lastTrxHash'] = lastTrxHash;
    data['tokenIdOnChain'] = tokenIdOnChain;
    data['issueTime'] = issueTime;
    data['lastTrxTime'] = lastTrxTime;
    if (tradeInfo != null) {
      data['tradeInfo'] = tradeInfo!.toJson();
    }
    data['description'] = description;
    data['isFollow'] = isFollow;
    data['isModerated'] = isModerated;
    return data;
  }
}

class TokenDataTokenCollectionCreator {
/*
{
  "address": "0xFA7d6962e8C0f26935A0667E0595e845B54ad475",
  "displayName": "好的创作者",
  "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d0891420-17d9-11ed-9e4a-3574307073f1.jpg",
  "bannerImageUrl": "",
  "userId": "234487063838236644",
  "description": "",
  "createdCollectionCount": "12",
  "isCertified": false,
  "isFollow": false,
  "isCreator": false,
  "createdTokens": [
    {
      "id": "473739582857295622",
      "name": "比啊",
      "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
      "owner": "",
      "collection": "",
      "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
      "tokenIdOnChain": "0",
      "issueTime": "-6795393721871",
      "lastTrxTime": "1656592809000",
      "tradeInfo": {
        "status": "SELLING",
        "type": "AUCTION",
        "tradeOrderId": "471632330167950581",
        "price": 0.01,
        "startTradeTime": "-62135625943000",
        "auctionInfo": {
          "currentPrice": 0.01,
          "startPrice": 0.01,
          "bidCount": 0,
          "finishTime": "-62135625943000",
          "incrementsAmount": 40,
          "depositAmount": 80
        }
      },
      "description": "你",
      "isFollow": false,
      "isModerated": false
    }
  ],
  "addressExploreUrl": "",
  "flowerCount": "0"
}
*/

  String? address;
  String? displayName;
  String? avatarUrl;
  String? bannerImageUrl;
  String? userId;
  String? description;
  String? createdCollectionCount;
  bool? isCertified;
  bool? isFollow;
  bool? isCreator;
  List<TokenDataTokenCollectionCreatorCreatedTokens?>? createdTokens;
  String? addressExploreUrl;
  String? flowerCount;

  TokenDataTokenCollectionCreator({
    this.address,
    this.displayName,
    this.avatarUrl,
    this.bannerImageUrl,
    this.userId,
    this.description,
    this.createdCollectionCount,
    this.isCertified,
    this.isFollow,
    this.isCreator,
    this.createdTokens,
    this.addressExploreUrl,
    this.flowerCount,
  });

  TokenDataTokenCollectionCreator.fromJson(Map<String, dynamic> json) {
    address = json['address']?.toString();
    displayName = json['displayName']?.toString();
    avatarUrl = json['avatarUrl']?.toString();
    bannerImageUrl = json['bannerImageUrl']?.toString();
    userId = json['userId']?.toString();
    description = json['description']?.toString();
    createdCollectionCount = json['createdCollectionCount']?.toString();
    isCertified = json['isCertified'];
    isFollow = json['isFollow'];
    isCreator = json['isCreator'];
    if (json['createdTokens'] != null && (json['createdTokens'] is List)) {
      final v = json['createdTokens'];
      final arr0 = <TokenDataTokenCollectionCreatorCreatedTokens>[];
      v.forEach((v) {
        arr0.add(TokenDataTokenCollectionCreatorCreatedTokens.fromJson(v));
      });
      createdTokens = arr0;
    }
    addressExploreUrl = json['addressExploreUrl']?.toString();
    flowerCount = json['flowerCount']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['address'] = address;
    data['displayName'] = displayName;
    data['avatarUrl'] = avatarUrl;
    data['bannerImageUrl'] = bannerImageUrl;
    data['userId'] = userId;
    data['description'] = description;
    data['createdCollectionCount'] = createdCollectionCount;
    data['isCertified'] = isCertified;
    data['isFollow'] = isFollow;
    data['isCreator'] = isCreator;
    if (createdTokens != null) {
      final v = createdTokens;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['createdTokens'] = arr0;
    }
    data['addressExploreUrl'] = addressExploreUrl;
    data['flowerCount'] = flowerCount;
    return data;
  }
}

class TokenDataTokenCollection {
/*
{
  "id": "488662944952941107",
  "name": "画作君",
  "logoUrl": "",
  "bannerImageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d6c13170-17dd-11ed-9357-0b15d2af7544.jpg",
  "creator": {
    "address": "0xFA7d6962e8C0f26935A0667E0595e845B54ad475",
    "displayName": "好的创作者",
    "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d0891420-17d9-11ed-9e4a-3574307073f1.jpg",
    "bannerImageUrl": "",
    "userId": "234487063838236644",
    "description": "",
    "createdCollectionCount": "12",
    "isCertified": false,
    "isFollow": false,
    "isCreator": false,
    "createdTokens": [
      {
        "id": "473739582857295622",
        "name": "比啊",
        "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
        "owner": "",
        "collection": "",
        "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
        "tokenIdOnChain": "0",
        "issueTime": "-6795393721871",
        "lastTrxTime": "1656592809000",
        "tradeInfo": {
          "status": "SELLING",
          "type": "AUCTION",
          "tradeOrderId": "471632330167950581",
          "price": 0.01,
          "startTradeTime": "-62135625943000",
          "auctionInfo": {
            "currentPrice": 0.01,
            "startPrice": 0.01,
            "bidCount": 0,
            "finishTime": "-62135625943000",
            "incrementsAmount": 40,
            "depositAmount": 80
          }
        },
        "description": "你",
        "isFollow": false,
        "isModerated": false
      }
    ],
    "addressExploreUrl": "",
    "flowerCount": "0"
  },
  "stats": {
    "tokenCount": 23,
    "ownerCount": 4
  },
  "creatorId": "234487063838236644",
  "contract": {
    "address": "0xE76de79503736F6BbC3B84a159681d96671d2720",
    "contractStandard": "ERC721"
  },
  "ownerNote": "",
  "rightsDescription": "",
  "price": 0,
  "issuer": "临界",
  "imgs": [
    ""
  ],
  "details": "好的作品需要好的人来发现",
  "blockchainExploreAddress": "https://mumbai.polygonscan.com/address/0xE76de79503736F6BbC3B84a159681d96671d2720"
}
*/

  String? id;
  String? name;
  String? logoUrl;
  String? bannerImageUrl;
  TokenDataTokenCollectionCreator? creator;
  TokenDataTokenCollectionStats? stats;
  String? creatorId;
  TokenDataTokenCollectionContract? contract;
  String? ownerNote;
  String? rightsDescription;
  int? price;
  String? issuer;
  List<String?>? imgs;
  String? details;
  String? blockchainExploreAddress;

  TokenDataTokenCollection({
    this.id,
    this.name,
    this.logoUrl,
    this.bannerImageUrl,
    this.creator,
    this.stats,
    this.creatorId,
    this.contract,
    this.ownerNote,
    this.rightsDescription,
    this.price,
    this.issuer,
    this.imgs,
    this.details,
    this.blockchainExploreAddress,
  });

  TokenDataTokenCollection.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    name = json['name']?.toString();
    logoUrl = json['logoUrl']?.toString();
    bannerImageUrl = json['bannerImageUrl']?.toString();
    creator = (json['creator'] != null && (json['creator'] is Map))
        ? TokenDataTokenCollectionCreator.fromJson(json['creator'])
        : null;
    stats = (json['stats'] != null && (json['stats'] is Map))
        ? TokenDataTokenCollectionStats.fromJson(json['stats'])
        : null;
    creatorId = json['creatorId']?.toString();
    contract = (json['contract'] != null && (json['contract'] is Map))
        ? TokenDataTokenCollectionContract.fromJson(json['contract'])
        : null;
    ownerNote = json['ownerNote']?.toString();
    rightsDescription = json['rightsDescription']?.toString();
    price = int.tryParse(json['price']?.toString() ?? '');
    issuer = json['issuer']?.toString();
    if (json['imgs'] != null && (json['imgs'] is List)) {
      final v = json['imgs'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      imgs = arr0;
    }
    details = json['details']?.toString();
    blockchainExploreAddress = json['blockchainExploreAddress']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['logoUrl'] = logoUrl;
    data['bannerImageUrl'] = bannerImageUrl;
    if (creator != null) {
      data['creator'] = creator!.toJson();
    }
    if (stats != null) {
      data['stats'] = stats!.toJson();
    }
    data['creatorId'] = creatorId;
    if (contract != null) {
      data['contract'] = contract!.toJson();
    }
    data['ownerNote'] = ownerNote;
    data['rightsDescription'] = rightsDescription;
    data['price'] = price;
    data['issuer'] = issuer;
    if (imgs != null) {
      final v = imgs;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['imgs'] = arr0;
    }
    data['details'] = details;
    data['blockchainExploreAddress'] = blockchainExploreAddress;
    return data;
  }
}

class TokenDataTokenOwnerCreatedTokensTradeInfoAuctionInfo {
/*
{
  "currentPrice": 0.01,
  "startPrice": 0.01,
  "bidCount": 0,
  "finishTime": "-62135625943000",
  "incrementsAmount": 40,
  "depositAmount": 80
}
*/

  double? currentPrice;
  double? startPrice;
  int? bidCount;
  String? finishTime;
  int? incrementsAmount;
  int? depositAmount;

  TokenDataTokenOwnerCreatedTokensTradeInfoAuctionInfo({
    this.currentPrice,
    this.startPrice,
    this.bidCount,
    this.finishTime,
    this.incrementsAmount,
    this.depositAmount,
  });

  TokenDataTokenOwnerCreatedTokensTradeInfoAuctionInfo.fromJson(
      Map<String, dynamic> json) {
    currentPrice = double.tryParse(json['currentPrice']?.toString() ?? '');
    startPrice = double.tryParse(json['startPrice']?.toString() ?? '');
    bidCount = int.tryParse(json['bidCount']?.toString() ?? '');
    finishTime = json['finishTime']?.toString();
    incrementsAmount = int.tryParse(json['incrementsAmount']?.toString() ?? '');
    depositAmount = int.tryParse(json['depositAmount']?.toString() ?? '');
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['currentPrice'] = currentPrice;
    data['startPrice'] = startPrice;
    data['bidCount'] = bidCount;
    data['finishTime'] = finishTime;
    data['incrementsAmount'] = incrementsAmount;
    data['depositAmount'] = depositAmount;
    return data;
  }
}

class TokenDataTokenOwnerCreatedTokensTradeInfo {
/*
{
  "status": "SELLING",
  "type": "AUCTION",
  "tradeOrderId": "471632330167950581",
  "price": 0.01,
  "startTradeTime": "-62135625943000",
  "auctionInfo": {
    "currentPrice": 0.01,
    "startPrice": 0.01,
    "bidCount": 0,
    "finishTime": "-62135625943000",
    "incrementsAmount": 40,
    "depositAmount": 80
  }
}
*/

  String? status;
  String? type;
  String? tradeOrderId;
  double? price;
  String? startTradeTime;
  TokenDataTokenOwnerCreatedTokensTradeInfoAuctionInfo? auctionInfo;

  TokenDataTokenOwnerCreatedTokensTradeInfo({
    this.status,
    this.type,
    this.tradeOrderId,
    this.price,
    this.startTradeTime,
    this.auctionInfo,
  });

  TokenDataTokenOwnerCreatedTokensTradeInfo.fromJson(
      Map<String, dynamic> json) {
    status = json['status']?.toString();
    type = json['type']?.toString();
    tradeOrderId = json['tradeOrderId']?.toString();
    price = double.tryParse(json['price']?.toString() ?? '');
    startTradeTime = json['startTradeTime']?.toString();
    auctionInfo = (json['auctionInfo'] != null && (json['auctionInfo'] is Map))
        ? TokenDataTokenOwnerCreatedTokensTradeInfoAuctionInfo.fromJson(
            json['auctionInfo'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['type'] = type;
    data['tradeOrderId'] = tradeOrderId;
    data['price'] = price;
    data['startTradeTime'] = startTradeTime;
    if (auctionInfo != null) {
      data['auctionInfo'] = auctionInfo!.toJson();
    }
    return data;
  }
}

class TokenDataTokenOwnerCreatedTokens {
/*
{
  "id": "473739582857295622",
  "name": "比啊",
  "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
  "owner": "",
  "collection": "",
  "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
  "tokenIdOnChain": "0",
  "issueTime": "-6795393721871",
  "lastTrxTime": "1656592809000",
  "tradeInfo": {
    "status": "SELLING",
    "type": "AUCTION",
    "tradeOrderId": "471632330167950581",
    "price": 0.01,
    "startTradeTime": "-62135625943000",
    "auctionInfo": {
      "currentPrice": 0.01,
      "startPrice": 0.01,
      "bidCount": 0,
      "finishTime": "-62135625943000",
      "incrementsAmount": 40,
      "depositAmount": 80
    }
  },
  "description": "你",
  "isFollow": false,
  "isModerated": false
}
*/

  String? id;
  String? name;
  String? imageUrl;
  String? owner;
  String? collection;
  String? lastTrxHash;
  String? tokenIdOnChain;
  String? issueTime;
  String? lastTrxTime;
  TokenDataTokenOwnerCreatedTokensTradeInfo? tradeInfo;
  String? description;
  bool? isFollow;
  bool? isModerated;

  TokenDataTokenOwnerCreatedTokens({
    this.id,
    this.name,
    this.imageUrl,
    this.owner,
    this.collection,
    this.lastTrxHash,
    this.tokenIdOnChain,
    this.issueTime,
    this.lastTrxTime,
    this.tradeInfo,
    this.description,
    this.isFollow,
    this.isModerated,
  });

  TokenDataTokenOwnerCreatedTokens.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    name = json['name']?.toString();
    imageUrl = json['imageUrl']?.toString();
    owner = json['owner']?.toString();
    collection = json['collection']?.toString();
    lastTrxHash = json['lastTrxHash']?.toString();
    tokenIdOnChain = json['tokenIdOnChain']?.toString();
    issueTime = json['issueTime']?.toString();
    lastTrxTime = json['lastTrxTime']?.toString();
    tradeInfo = (json['tradeInfo'] != null && (json['tradeInfo'] is Map))
        ? TokenDataTokenOwnerCreatedTokensTradeInfo.fromJson(json['tradeInfo'])
        : null;
    description = json['description']?.toString();
    isFollow = json['isFollow'];
    isModerated = json['isModerated'];
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['imageUrl'] = imageUrl;
    data['owner'] = owner;
    data['collection'] = collection;
    data['lastTrxHash'] = lastTrxHash;
    data['tokenIdOnChain'] = tokenIdOnChain;
    data['issueTime'] = issueTime;
    data['lastTrxTime'] = lastTrxTime;
    if (tradeInfo != null) {
      data['tradeInfo'] = tradeInfo!.toJson();
    }
    data['description'] = description;
    data['isFollow'] = isFollow;
    data['isModerated'] = isModerated;
    return data;
  }
}

class TokenDataTokenOwner {
/*
{
  "address": "0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
  "displayName": "路过的假面骑士",
  "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/bc32a010-1df9-11ed-9baf-43afdc0fad4c.jpg",
  "bannerImageUrl": "",
  "userId": "483450177492033639",
  "description": "",
  "createdCollectionCount": "0",
  "isCertified": false,
  "isFollow": false,
  "isCreator": false,
  "createdTokens": [
    {
      "id": "473739582857295622",
      "name": "比啊",
      "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
      "owner": "",
      "collection": "",
      "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
      "tokenIdOnChain": "0",
      "issueTime": "-6795393721871",
      "lastTrxTime": "1656592809000",
      "tradeInfo": {
        "status": "SELLING",
        "type": "AUCTION",
        "tradeOrderId": "471632330167950581",
        "price": 0.01,
        "startTradeTime": "-62135625943000",
        "auctionInfo": {
          "currentPrice": 0.01,
          "startPrice": 0.01,
          "bidCount": 0,
          "finishTime": "-62135625943000",
          "incrementsAmount": 40,
          "depositAmount": 80
        }
      },
      "description": "你",
      "isFollow": false,
      "isModerated": false
    }
  ],
  "addressExploreUrl": "https://mumbai.polygonscan.com/address/0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
  "flowerCount": "0"
}
*/

  String? address;
  String? displayName;
  String? avatarUrl;
  String? bannerImageUrl;
  String? userId;
  String? description;
  String? createdCollectionCount;
  bool? isCertified;
  bool? isFollow;
  bool? isCreator;
  List<TokenDataTokenOwnerCreatedTokens?>? createdTokens;
  String? addressExploreUrl;
  String? flowerCount;

  TokenDataTokenOwner({
    this.address,
    this.displayName,
    this.avatarUrl,
    this.bannerImageUrl,
    this.userId,
    this.description,
    this.createdCollectionCount,
    this.isCertified,
    this.isFollow,
    this.isCreator,
    this.createdTokens,
    this.addressExploreUrl,
    this.flowerCount,
  });

  TokenDataTokenOwner.fromJson(Map<String, dynamic> json) {
    address = json['address']?.toString();
    displayName = json['displayName']?.toString();
    avatarUrl = json['avatarUrl']?.toString();
    bannerImageUrl = json['bannerImageUrl']?.toString();
    userId = json['userId']?.toString();
    description = json['description']?.toString();
    createdCollectionCount = json['createdCollectionCount']?.toString();
    isCertified = json['isCertified'];
    isFollow = json['isFollow'];
    isCreator = json['isCreator'];
    if (json['createdTokens'] != null && (json['createdTokens'] is List)) {
      final v = json['createdTokens'];
      final arr0 = <TokenDataTokenOwnerCreatedTokens>[];
      v.forEach((v) {
        arr0.add(TokenDataTokenOwnerCreatedTokens.fromJson(v));
      });
      createdTokens = arr0;
    }
    addressExploreUrl = json['addressExploreUrl']?.toString();
    flowerCount = json['flowerCount']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['address'] = address;
    data['displayName'] = displayName;
    data['avatarUrl'] = avatarUrl;
    data['bannerImageUrl'] = bannerImageUrl;
    data['userId'] = userId;
    data['description'] = description;
    data['createdCollectionCount'] = createdCollectionCount;
    data['isCertified'] = isCertified;
    data['isFollow'] = isFollow;
    data['isCreator'] = isCreator;
    if (createdTokens != null) {
      final v = createdTokens;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['createdTokens'] = arr0;
    }
    data['addressExploreUrl'] = addressExploreUrl;
    data['flowerCount'] = flowerCount;
    return data;
  }
}

class TokenDataToken {
/*
{
  "id": "493818082519780119",
  "name": "comic",
  "imageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/6d7bd8f0-22c8-11ed-9d19-a5c038f7e2cf.jpg",
  "owner": {
    "address": "0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
    "displayName": "路过的假面骑士",
    "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/bc32a010-1df9-11ed-9baf-43afdc0fad4c.jpg",
    "bannerImageUrl": "",
    "userId": "483450177492033639",
    "description": "",
    "createdCollectionCount": "0",
    "isCertified": false,
    "isFollow": false,
    "isCreator": false,
    "createdTokens": [
      {
        "id": "473739582857295622",
        "name": "比啊",
        "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
        "owner": "",
        "collection": "",
        "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
        "tokenIdOnChain": "0",
        "issueTime": "-6795393721871",
        "lastTrxTime": "1656592809000",
        "tradeInfo": {
          "status": "SELLING",
          "type": "AUCTION",
          "tradeOrderId": "471632330167950581",
          "price": 0.01,
          "startTradeTime": "-62135625943000",
          "auctionInfo": {
            "currentPrice": 0.01,
            "startPrice": 0.01,
            "bidCount": 0,
            "finishTime": "-62135625943000",
            "incrementsAmount": 40,
            "depositAmount": 80
          }
        },
        "description": "你",
        "isFollow": false,
        "isModerated": false
      }
    ],
    "addressExploreUrl": "https://mumbai.polygonscan.com/address/0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
    "flowerCount": "0"
  },
  "collection": {
    "id": "488662944952941107",
    "name": "画作君",
    "logoUrl": "",
    "bannerImageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d6c13170-17dd-11ed-9357-0b15d2af7544.jpg",
    "creator": {
      "address": "0xFA7d6962e8C0f26935A0667E0595e845B54ad475",
      "displayName": "好的创作者",
      "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d0891420-17d9-11ed-9e4a-3574307073f1.jpg",
      "bannerImageUrl": "",
      "userId": "234487063838236644",
      "description": "",
      "createdCollectionCount": "12",
      "isCertified": false,
      "isFollow": false,
      "isCreator": false,
      "createdTokens": [
        {
          "id": "473739582857295622",
          "name": "比啊",
          "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
          "owner": "",
          "collection": "",
          "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
          "tokenIdOnChain": "0",
          "issueTime": "-6795393721871",
          "lastTrxTime": "1656592809000",
          "tradeInfo": {
            "status": "SELLING",
            "type": "AUCTION",
            "tradeOrderId": "471632330167950581",
            "price": 0.01,
            "startTradeTime": "-62135625943000",
            "auctionInfo": {
              "currentPrice": 0.01,
              "startPrice": 0.01,
              "bidCount": 0,
              "finishTime": "-62135625943000",
              "incrementsAmount": 40,
              "depositAmount": 80
            }
          },
          "description": "你",
          "isFollow": false,
          "isModerated": false
        }
      ],
      "addressExploreUrl": "",
      "flowerCount": "0"
    },
    "stats": {
      "tokenCount": 23,
      "ownerCount": 4
    },
    "creatorId": "234487063838236644",
    "contract": {
      "address": "0xE76de79503736F6BbC3B84a159681d96671d2720",
      "contractStandard": "ERC721"
    },
    "ownerNote": "",
    "rightsDescription": "",
    "price": 0,
    "issuer": "临界",
    "imgs": [
      ""
    ],
    "details": "好的作品需要好的人来发现",
    "blockchainExploreAddress": "https://mumbai.polygonscan.com/address/0xE76de79503736F6BbC3B84a159681d96671d2720"
  },
  "lastTrxHash": "0xc0e1bd6771caef9f65ec2a33a8230d4d2c134262ddf06084a251c8a914406c8f",
  "tokenIdOnChain": "14",
  "issueTime": "1661247982000",
  "lastTrxTime": "1664530831000",
  "tradeInfo": {
    "status": "SOLD_OUT",
    "type": "SALE",
    "tradeOrderId": "0",
    "price": 0.01,
    "startTradeTime": "0",
    "auctionInfo": {
      "currentPrice": 0.01,
      "startPrice": 0.01,
      "bidCount": 0,
      "finishTime": "-62135625943000",
      "incrementsAmount": 20,
      "depositAmount": 0,
      "isSubscribe": false,
      "finalOrderId": "0",
      "maxBidUserId": "0",
      "status": "22"
    }
  },
  "description": "",
  "isFollow": false,
  "isModerated": true,
  "lastTrxHashExploreUrl": "https://mumbai.polygonscan.com/tx/0xc0e1bd6771caef9f65ec2a33a8230d4d2c134262ddf06084a251c8a914406c8f",
  "originImageUrl": "",
  "moderateStatus": "ONCHAIN",
  "author": "",
  "supplementInstruction": "",
  "QQ": "",
  "attachments": [
    ""
  ],
  "rejectReason": ""
}
*/

  String? id;
  String? name;
  String? imageUrl;
  TokenDataTokenOwner? owner;
  TokenDataTokenCollection? collection;
  String? lastTrxHash;
  String? tokenIdOnChain;
  String? issueTime;
  String? lastTrxTime;
  TokenDataTokenTradeInfo? tradeInfo;
  String? description;
  bool? isFollow;
  bool? isModerated;
  String? lastTrxHashExploreUrl;
  String? originImageUrl;
  String? moderateStatus;
  String? author;
  String? supplementInstruction;
  String? QQ;
  List<String?>? attachments;
  String? rejectReason;
  String? creatorId;

  TokenDataToken({
    this.id,
    this.name,
    this.imageUrl,
    this.owner,
    this.collection,
    this.lastTrxHash,
    this.tokenIdOnChain,
    this.issueTime,
    this.lastTrxTime,
    this.tradeInfo,
    this.description,
    this.isFollow,
    this.isModerated,
    this.lastTrxHashExploreUrl,
    this.originImageUrl,
    this.moderateStatus,
    this.author,
    this.supplementInstruction,
    this.QQ,
    this.attachments,
    this.rejectReason,
    this.creatorId,
  });

  TokenDataToken.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    name = json['name']?.toString();
    imageUrl = json['imageUrl']?.toString();
    owner = (json['owner'] != null && (json['owner'] is Map))
        ? TokenDataTokenOwner.fromJson(json['owner'])
        : null;
    collection = (json['collection'] != null && (json['collection'] is Map))
        ? TokenDataTokenCollection.fromJson(json['collection'])
        : null;
    lastTrxHash = json['lastTrxHash']?.toString();
    tokenIdOnChain = json['tokenIdOnChain']?.toString();
    issueTime = json['issueTime']?.toString();
    lastTrxTime = json['lastTrxTime']?.toString();
    tradeInfo = (json['tradeInfo'] != null && (json['tradeInfo'] is Map))
        ? TokenDataTokenTradeInfo.fromJson(json['tradeInfo'])
        : null;
    description = json['description']?.toString();
    isFollow = json['isFollow'];
    isModerated = json['isModerated'];
    lastTrxHashExploreUrl = json['lastTrxHashExploreUrl']?.toString();
    originImageUrl = json['originImageUrl']?.toString();
    moderateStatus = json['moderateStatus']?.toString();
    author = json['author']?.toString();
    supplementInstruction = json['supplementInstruction']?.toString();
    QQ = json['QQ']?.toString();
    if (json['attachments'] != null && (json['attachments'] is List)) {
      final v = json['attachments'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      attachments = arr0;
    }
    rejectReason = json['rejectReason']?.toString();
    creatorId = json['creatorId']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['imageUrl'] = imageUrl;
    if (owner != null) {
      data['owner'] = owner!.toJson();
    }
    if (collection != null) {
      data['collection'] = collection!.toJson();
    }
    data['lastTrxHash'] = lastTrxHash;
    data['tokenIdOnChain'] = tokenIdOnChain;
    data['issueTime'] = issueTime;
    data['lastTrxTime'] = lastTrxTime;
    if (tradeInfo != null) {
      data['tradeInfo'] = tradeInfo!.toJson();
    }
    data['description'] = description;
    data['isFollow'] = isFollow;
    data['isModerated'] = isModerated;
    data['lastTrxHashExploreUrl'] = lastTrxHashExploreUrl;
    data['originImageUrl'] = originImageUrl;
    data['moderateStatus'] = moderateStatus;
    data['author'] = author;
    data['supplementInstruction'] = supplementInstruction;
    data['QQ'] = QQ;
    if (attachments != null) {
      final v = attachments;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['attachments'] = arr0;
    }
    data['rejectReason'] = rejectReason;
    data['creatorId'] = creatorId;
    return data;
  }
}

class TokenData {
/*
{
  "token": {
    "id": "493818082519780119",
    "name": "comic",
    "imageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/6d7bd8f0-22c8-11ed-9d19-a5c038f7e2cf.jpg",
    "owner": {
      "address": "0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
      "displayName": "路过的假面骑士",
      "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/bc32a010-1df9-11ed-9baf-43afdc0fad4c.jpg",
      "bannerImageUrl": "",
      "userId": "483450177492033639",
      "description": "",
      "createdCollectionCount": "0",
      "isCertified": false,
      "isFollow": false,
      "isCreator": false,
      "createdTokens": [
        {
          "id": "473739582857295622",
          "name": "比啊",
          "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
          "owner": "",
          "collection": "",
          "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
          "tokenIdOnChain": "0",
          "issueTime": "-6795393721871",
          "lastTrxTime": "1656592809000",
          "tradeInfo": {
            "status": "SELLING",
            "type": "AUCTION",
            "tradeOrderId": "471632330167950581",
            "price": 0.01,
            "startTradeTime": "-62135625943000",
            "auctionInfo": {
              "currentPrice": 0.01,
              "startPrice": 0.01,
              "bidCount": 0,
              "finishTime": "-62135625943000",
              "incrementsAmount": 40,
              "depositAmount": 80
            }
          },
          "description": "你",
          "isFollow": false,
          "isModerated": false
        }
      ],
      "addressExploreUrl": "https://mumbai.polygonscan.com/address/0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
      "flowerCount": "0"
    },
    "collection": {
      "id": "488662944952941107",
      "name": "画作君",
      "logoUrl": "",
      "bannerImageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d6c13170-17dd-11ed-9357-0b15d2af7544.jpg",
      "creator": {
        "address": "0xFA7d6962e8C0f26935A0667E0595e845B54ad475",
        "displayName": "好的创作者",
        "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d0891420-17d9-11ed-9e4a-3574307073f1.jpg",
        "bannerImageUrl": "",
        "userId": "234487063838236644",
        "description": "",
        "createdCollectionCount": "12",
        "isCertified": false,
        "isFollow": false,
        "isCreator": false,
        "createdTokens": [
          {
            "id": "473739582857295622",
            "name": "比啊",
            "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
            "owner": "",
            "collection": "",
            "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
            "tokenIdOnChain": "0",
            "issueTime": "-6795393721871",
            "lastTrxTime": "1656592809000",
            "tradeInfo": {
              "status": "SELLING",
              "type": "AUCTION",
              "tradeOrderId": "471632330167950581",
              "price": 0.01,
              "startTradeTime": "-62135625943000",
              "auctionInfo": {
                "currentPrice": 0.01,
                "startPrice": 0.01,
                "bidCount": 0,
                "finishTime": "-62135625943000",
                "incrementsAmount": 40,
                "depositAmount": 80
              }
            },
            "description": "你",
            "isFollow": false,
            "isModerated": false
          }
        ],
        "addressExploreUrl": "",
        "flowerCount": "0"
      },
      "stats": {
        "tokenCount": 23,
        "ownerCount": 4
      },
      "creatorId": "234487063838236644",
      "contract": {
        "address": "0xE76de79503736F6BbC3B84a159681d96671d2720",
        "contractStandard": "ERC721"
      },
      "ownerNote": "",
      "rightsDescription": "",
      "price": 0,
      "issuer": "临界",
      "imgs": [
        ""
      ],
      "details": "好的作品需要好的人来发现",
      "blockchainExploreAddress": "https://mumbai.polygonscan.com/address/0xE76de79503736F6BbC3B84a159681d96671d2720"
    },
    "lastTrxHash": "0xc0e1bd6771caef9f65ec2a33a8230d4d2c134262ddf06084a251c8a914406c8f",
    "tokenIdOnChain": "14",
    "issueTime": "1661247982000",
    "lastTrxTime": "1664530831000",
    "tradeInfo": {
      "status": "SOLD_OUT",
      "type": "SALE",
      "tradeOrderId": "0",
      "price": 0.01,
      "startTradeTime": "0",
      "auctionInfo": {
        "currentPrice": 0.01,
        "startPrice": 0.01,
        "bidCount": 0,
        "finishTime": "-62135625943000",
        "incrementsAmount": 20,
        "depositAmount": 0,
        "isSubscribe": false,
        "finalOrderId": "0",
        "maxBidUserId": "0",
        "status": "22"
      }
    },
    "description": "",
    "isFollow": false,
    "isModerated": true,
    "lastTrxHashExploreUrl": "https://mumbai.polygonscan.com/tx/0xc0e1bd6771caef9f65ec2a33a8230d4d2c134262ddf06084a251c8a914406c8f",
    "originImageUrl": "",
    "moderateStatus": "ONCHAIN",
    "author": "",
    "supplementInstruction": "",
    "QQ": "",
    "attachments": [
      ""
    ],
    "rejectReason": ""
  }
}
*/

  TokenBean? token;

  TokenData({
    this.token,
  });

  TokenData.fromJson(Map<String, dynamic> json) {
    token = (json['token'] != null && (json['token'] is Map))
        ? TokenBean.fromJson(json['token'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (token != null) {
      data['token'] = token!.toJson();
    }
    return data;
  }
}

class Token {
/*
{
  "code": 0,
  "data": {
    "token": {
      "id": "493818082519780119",
      "name": "comic",
      "imageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/6d7bd8f0-22c8-11ed-9d19-a5c038f7e2cf.jpg",
      "owner": {
        "address": "0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
        "displayName": "路过的假面骑士",
        "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/bc32a010-1df9-11ed-9baf-43afdc0fad4c.jpg",
        "bannerImageUrl": "",
        "userId": "483450177492033639",
        "description": "",
        "createdCollectionCount": "0",
        "isCertified": false,
        "isFollow": false,
        "isCreator": false,
        "createdTokens": [
          {
            "id": "473739582857295622",
            "name": "比啊",
            "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
            "owner": "",
            "collection": "",
            "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
            "tokenIdOnChain": "0",
            "issueTime": "-6795393721871",
            "lastTrxTime": "1656592809000",
            "tradeInfo": {
              "status": "SELLING",
              "type": "AUCTION",
              "tradeOrderId": "471632330167950581",
              "price": 0.01,
              "startTradeTime": "-62135625943000",
              "auctionInfo": {
                "currentPrice": 0.01,
                "startPrice": 0.01,
                "bidCount": 0,
                "finishTime": "-62135625943000",
                "incrementsAmount": 40,
                "depositAmount": 80
              }
            },
            "description": "你",
            "isFollow": false,
            "isModerated": false
          }
        ],
        "addressExploreUrl": "https://mumbai.polygonscan.com/address/0x31A14d15e514F1810bbd54c9f199f3bFe1D19a54",
        "flowerCount": "0"
      },
      "collection": {
        "id": "488662944952941107",
        "name": "画作君",
        "logoUrl": "",
        "bannerImageUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d6c13170-17dd-11ed-9357-0b15d2af7544.jpg",
        "creator": {
          "address": "0xFA7d6962e8C0f26935A0667E0595e845B54ad475",
          "displayName": "好的创作者",
          "avatarUrl": "https://echoing-svc-upload.oss-cn-shanghai.aliyuncs.com/images/d0891420-17d9-11ed-9e4a-3574307073f1.jpg",
          "bannerImageUrl": "",
          "userId": "234487063838236644",
          "description": "",
          "createdCollectionCount": "12",
          "isCertified": false,
          "isFollow": false,
          "isCreator": false,
          "createdTokens": [
            {
              "id": "473739582857295622",
              "name": "比啊",
              "imageUrl": "https://echoing-linjie-upload.oss-cn-shanghai.aliyuncs.com/images/bca21980-f843-11ec-8f11-09bb2175d45c.jpg",
              "owner": "",
              "collection": "",
              "lastTrxHash": "0x74d03e0eebee579318778c94c4b09fd48571693adde5c29794f0607ff0544ecb",
              "tokenIdOnChain": "0",
              "issueTime": "-6795393721871",
              "lastTrxTime": "1656592809000",
              "tradeInfo": {
                "status": "SELLING",
                "type": "AUCTION",
                "tradeOrderId": "471632330167950581",
                "price": 0.01,
                "startTradeTime": "-62135625943000",
                "auctionInfo": {
                  "currentPrice": 0.01,
                  "startPrice": 0.01,
                  "bidCount": 0,
                  "finishTime": "-62135625943000",
                  "incrementsAmount": 40,
                  "depositAmount": 80
                }
              },
              "description": "你",
              "isFollow": false,
              "isModerated": false
            }
          ],
          "addressExploreUrl": "",
          "flowerCount": "0"
        },
        "stats": {
          "tokenCount": 23,
          "ownerCount": 4
        },
        "creatorId": "234487063838236644",
        "contract": {
          "address": "0xE76de79503736F6BbC3B84a159681d96671d2720",
          "contractStandard": "ERC721"
        },
        "ownerNote": "",
        "rightsDescription": "",
        "price": 0,
        "issuer": "临界",
        "imgs": [
          ""
        ],
        "details": "好的作品需要好的人来发现",
        "blockchainExploreAddress": "https://mumbai.polygonscan.com/address/0xE76de79503736F6BbC3B84a159681d96671d2720"
      },
      "lastTrxHash": "0xc0e1bd6771caef9f65ec2a33a8230d4d2c134262ddf06084a251c8a914406c8f",
      "tokenIdOnChain": "14",
      "issueTime": "1661247982000",
      "lastTrxTime": "1664530831000",
      "tradeInfo": {
        "status": "SOLD_OUT",
        "type": "SALE",
        "tradeOrderId": "0",
        "price": 0.01,
        "startTradeTime": "0",
        "auctionInfo": {
          "currentPrice": 0.01,
          "startPrice": 0.01,
          "bidCount": 0,
          "finishTime": "-62135625943000",
          "incrementsAmount": 20,
          "depositAmount": 0,
          "isSubscribe": false,
          "finalOrderId": "0",
          "maxBidUserId": "0",
          "status": "22"
        }
      },
      "description": "",
      "isFollow": false,
      "isModerated": true,
      "lastTrxHashExploreUrl": "https://mumbai.polygonscan.com/tx/0xc0e1bd6771caef9f65ec2a33a8230d4d2c134262ddf06084a251c8a914406c8f",
      "originImageUrl": "",
      "moderateStatus": "ONCHAIN",
      "author": "",
      "supplementInstruction": "",
      "QQ": "",
      "attachments": [
        ""
      ],
      "rejectReason": ""
    }
  },
  "message": "ok"
}
*/

  int? code;
  TokenData? data;
  String? message;

  Token({
    this.code,
    this.data,
    this.message,
  });

  Token.fromJson(Map<String, dynamic> json) {
    code = int.tryParse(json['code']?.toString() ?? '');
    data = (json['data'] != null && (json['data'] is Map))
        ? TokenData.fromJson(json['data'])
        : null;
    message = json['message']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['code'] = code;
    data['data'] = this.data!.toJson();
    data['message'] = message;
    return data;
  }
}
