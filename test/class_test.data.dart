// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'class_test.dart';

mixin _Bean {
  abstract final String name;
  abstract final List<String> list;
  abstract final List<Bean2> list2;
  abstract final Map<String, dynamic> map;
  abstract final List<String> Function()? builderFunction;
  abstract final Bean2? bean2;
  abstract final Bean3? bean3;

  Bean copyWith({
    String? name,
    List<String>? list,
    List<Bean2>? list2,
    Map<String, dynamic>? map,
    List<String> Function()? builderFunction,
    Bean2? bean2,
    Bean3? bean3,
  }) {
    return Bean(
      name: name ?? this.name,
      list: list ?? this.list,
      list2: list2 ?? this.list2,
      map: map ?? this.map,
      builderFunction: builderFunction ?? this.builderFunction,
      bean2: bean2 ?? this.bean2,
      bean3: bean3 ?? this.bean3,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Bean) {
      return false;
    }

    if (name != other.name) return false;
    if (!const DeepCollectionEquality().equals(list, other.list)) {
      return false;
    }
    if (!const DeepCollectionEquality().equals(list2, other.list2)) {
      return false;
    }
    if (!const DeepCollectionEquality().equals(map, other.map)) {
      return false;
    }
    if (builderFunction != other.builderFunction) return false;
    if (bean2 != other.bean2) return false;
    if (bean3 != other.bean3) return false;
    return true;
  }

  @override
  int get hashCode =>
      name.hashCode ^
      const DeepCollectionEquality().hash(list) ^
      const DeepCollectionEquality().hash(list2) ^
      const DeepCollectionEquality().hash(map) ^
      const DeepCollectionEquality().hash(builderFunction) ^
      bean2.hashCode ^
      bean3.hashCode;

  Map<String, dynamic> toMap() => {
        'name': name,
        'list': list,
        'list2': list2,
        'map': map,
        'bean2': bean2,
        'bean3': bean3,
      };

  static Bean fromJson(Map<String, dynamic> map) {
    return Bean(
      name:
          (map['name2'] ?? map['xx'] ?? map['xxx'] ?? map['xxx'])?.toString() ??
              "a",
      list: ((map['list']) != null
              ? ((map['list']) as List<dynamic>?)
                  ?.map((e) => e.toString())
                  .toList()
              : null) ??
          const [],
      list2: ((map['list2']) != null
              ? ((map['list2']) as List<dynamic>?)
                  ?.map((e) => Bean2.fromJson(e))
                  .toList()
              : null) ??
          const [],
      map: ((map['map']) as Map<String, dynamic>?) ?? const {},
      bean2: (map['bean2']) != null ? Bean2.fromJson((map['bean2'])) : null,
      bean3: (map['bean3']) != null ? Bean3.fromJson((map['bean3'])) : null,
    );
  }
}

mixin _Bean3 {
  abstract final String name;

  Bean3 copyWith({
    String? name,
  }) {
    return Bean3(
      name: name ?? this.name,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Bean3) {
      return false;
    }

    if (name != other.name) return false;
    return true;
  }

  @override
  int get hashCode => name.hashCode;

  Map<String, dynamic> toMap() => {
        'name': name,
      };

  static Bean3 fromMap(Map<String, dynamic> map) {
    return Bean3(
      name: (map['name'])?.toString() ?? "",
    );
  }
}
